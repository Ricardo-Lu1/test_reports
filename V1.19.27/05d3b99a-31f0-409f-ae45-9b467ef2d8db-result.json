{"name": "test_08_edit_time_for_circadian_rhythm_by_mqtt", "status": "broken", "statusDetails": {"message": "TimeoutError: [WinError 10060] A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond", "trace": "request = <FixtureRequest for <Function test_08_edit_time_for_circadian_rhythm_by_mqtt>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:145: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:115: in _execute_step_function\n    return_value = step_func(**kwargs)\n..\\..\\Steps\\rhythm_action_steps.py:9: in delete_all_rhythm\n    target.mqtt.delete_all_rhythm(home_id, light_name)\n..\\..\\..\\Wrapper\\wrapper_mqtt.py:191: in delete_all_rhythm\n    mqtt_server.publish_message(topic, cmd)\n..\\..\\..\\Utils\\mqtt_service.py:47: in publish_message\n    self.connect()\n..\\..\\..\\Utils\\mqtt_service.py:25: in connect\n    self.client.connect(self.server, self.port, 60)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\paho\\mqtt\\client.py:937: in connect\n    return self.reconnect()\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\paho\\mqtt\\client.py:1071: in reconnect\n    sock = self._create_socket_connection()\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\paho\\mqtt\\client.py:3522: in _create_socket_connection\n    return socket.create_connection(addr, source_address=source, timeout=self._keepalive)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\socket.py:728: in create_connection\n    raise err\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('mqtt-dev-1.wizconnected.cn', 1883), timeout = 60\nsource_address = ('', 0)\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               TimeoutError: [WinError 10060] A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond\n\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\socket.py:716: TimeoutError"}, "description": "rhythm_actions.feature: Edit time for circadian rhythm", "attachments": [{"name": "log", "source": "eaaa717e-16a2-4d6c-bcca-76ef45855398-attachment.txt", "type": "text/plain"}], "start": 1604649206416, "stop": 1604649231519, "uuid": "27400f7e-04fb-4229-a3cc-20c74e8c5bb1", "historyId": "c400f1501efb46a23cd0127ab6db372a", "testCaseId": "635dc8e8e87e2522c8bde9880c1d7fc4", "fullName": "Test_Suites.Tests.test_regression_module.test_09_rhythm_by_mqtt#test_08_edit_time_for_circadian_rhythm_by_mqtt", "labels": [{"name": "feature", "value": "Test cases for rhythm"}, {"name": "story", "value": "Edit time for circadian rhythm"}, {"name": "tag", "value": "@pytest.mark.usefixtures"}, {"name": "parentSuite", "value": "Test_Suites.Tests.test_regression_module"}, {"name": "suite", "value": "test_09_rhythm_by_mqtt"}, {"name": "host", "value": "DESKTOP-UME284Q"}, {"name": "thread", "value": "1161992-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Suites.Tests.test_regression_module.test_09_rhythm_by_mqtt"}]}