{
  "uid" : "b685dcf7cd07cc09",
  "name" : "test_08_edit_time_for_circadian_rhythm_by_mqtt",
  "fullName" : "Test_Suites.Tests.test_regression_module.test_09_rhythm_by_mqtt#test_08_edit_time_for_circadian_rhythm_by_mqtt",
  "historyId" : "c400f1501efb46a23cd0127ab6db372a",
  "time" : {
    "start" : 1604649206416,
    "stop" : 1604649231519,
    "duration" : 25103
  },
  "description" : "rhythm_actions.feature: Edit time for circadian rhythm",
  "descriptionHtml" : "<p>rhythm_actions.feature: Edit time for circadian rhythm</p>\n",
  "status" : "broken",
  "statusMessage" : "TimeoutError: [WinError 10060] A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond",
  "statusTrace" : "request = <FixtureRequest for <Function test_08_edit_time_for_circadian_rhythm_by_mqtt>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:145: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:115: in _execute_step_function\n    return_value = step_func(**kwargs)\n..\\..\\Steps\\rhythm_action_steps.py:9: in delete_all_rhythm\n    target.mqtt.delete_all_rhythm(home_id, light_name)\n..\\..\\..\\Wrapper\\wrapper_mqtt.py:191: in delete_all_rhythm\n    mqtt_server.publish_message(topic, cmd)\n..\\..\\..\\Utils\\mqtt_service.py:47: in publish_message\n    self.connect()\n..\\..\\..\\Utils\\mqtt_service.py:25: in connect\n    self.client.connect(self.server, self.port, 60)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\paho\\mqtt\\client.py:937: in connect\n    return self.reconnect()\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\paho\\mqtt\\client.py:1071: in reconnect\n    sock = self._create_socket_connection()\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\paho\\mqtt\\client.py:3522: in _create_socket_connection\n    return socket.create_connection(addr, source_address=source, timeout=self._keepalive)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\socket.py:728: in create_connection\n    raise err\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('mqtt-dev-1.wizconnected.cn', 1883), timeout = 60\nsource_address = ('', 0)\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               TimeoutError: [WinError 10060] A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond\n\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\socket.py:716: TimeoutError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_Module__pytest_setup_module",
    "time" : {
      "start" : 1604649115578,
      "stop" : 1604649115578,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "description" : "rhythm_actions.feature: Edit time for circadian rhythm",
    "status" : "broken",
    "statusMessage" : "TimeoutError: [WinError 10060] A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond",
    "statusTrace" : "request = <FixtureRequest for <Function test_08_edit_time_for_circadian_rhythm_by_mqtt>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:145: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:115: in _execute_step_function\n    return_value = step_func(**kwargs)\n..\\..\\Steps\\rhythm_action_steps.py:9: in delete_all_rhythm\n    target.mqtt.delete_all_rhythm(home_id, light_name)\n..\\..\\..\\Wrapper\\wrapper_mqtt.py:191: in delete_all_rhythm\n    mqtt_server.publish_message(topic, cmd)\n..\\..\\..\\Utils\\mqtt_service.py:47: in publish_message\n    self.connect()\n..\\..\\..\\Utils\\mqtt_service.py:25: in connect\n    self.client.connect(self.server, self.port, 60)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\paho\\mqtt\\client.py:937: in connect\n    return self.reconnect()\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\paho\\mqtt\\client.py:1071: in reconnect\n    sock = self._create_socket_connection()\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\paho\\mqtt\\client.py:3522: in _create_socket_connection\n    return socket.create_connection(addr, source_address=source, timeout=self._keepalive)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\socket.py:728: in create_connection\n    raise err\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('mqtt-dev-1.wizconnected.cn', 1883), timeout = 60\nsource_address = ('', 0)\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               TimeoutError: [WinError 10060] A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond\n\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\socket.py:716: TimeoutError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "740c6794b071da53",
      "name" : "log",
      "source" : "740c6794b071da53.txt",
      "type" : "text/plain",
      "size" : 911
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ {
    "name" : "_Module__pytest_setup_module::0",
    "time" : {
      "start" : 1604650575379,
      "stop" : 1604650584414,
      "duration" : 9035
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Test cases for rhythm"
  }, {
    "name" : "story",
    "value" : "Edit time for circadian rhythm"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures"
  }, {
    "name" : "parentSuite",
    "value" : "Test_Suites.Tests.test_regression_module"
  }, {
    "name" : "suite",
    "value" : "test_09_rhythm_by_mqtt"
  }, {
    "name" : "host",
    "value" : "DESKTOP-UME284Q"
  }, {
    "name" : "thread",
    "value" : "1161992-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "Test_Suites.Tests.test_regression_module.test_09_rhythm_by_mqtt"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "@pytest.mark.usefixtures" ]
  },
  "source" : "b685dcf7cd07cc09.json",
  "parameterValues" : [ ]
}