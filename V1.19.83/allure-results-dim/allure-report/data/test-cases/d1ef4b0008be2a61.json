{
  "uid" : "d1ef4b0008be2a61",
  "name" : "test_ap_pair_lamps_only_ble",
  "fullName" : "Test_Suites.Tests.test_function_with_app.test_pair_lamps_only_ble#test_ap_pair_lamps_only_ble",
  "historyId" : "26793d74b48c8c0cb8eb155dbf6d9ab3",
  "time" : {
    "start" : 1599208062938,
    "stop" : 1599208191579,
    "duration" : 128641
  },
  "description" : "pair_lamps_only_ble.feature: AP pairing only ble",
  "descriptionHtml" : "<p>pair_lamps_only_ble.feature: AP pairing only ble</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: manual pairing light fail, no light is found",
  "statusTrace" : "request = <FixtureRequest for <Function test_ap_pair_lamps_only_ble>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\n..\\..\\..\\venv\\lib\\site-packages\\pytest_bdd\\scenario.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\venv\\lib\\site-packages\\pytest_bdd\\scenario.py:166: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n..\\..\\..\\venv\\lib\\site-packages\\pytest_bdd\\scenario.py:115: in _execute_step_function\n    step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x000001C8A6780DC8>\nlight_name = 'light_3'\n\n    @then(parsers.parse('check manual pairing {light_name} result'))\n    def check_manual_result(target, light_name):\n        \"\"\"\n        - Narrative:\n            check manual pairing result\n        \"\"\"\n        light_number = 1\n        paired_light_info = []\n        logger.info(\"check manual pairing result\")\n        # get lights from config file\n        lamps = target.config_para['lamps'].copy()\n        e = target.ui.home_page.get_light_icon(light_number)\n    \n        # check if ota icon exists\n        logger.info(\"check if ota icon exits\")\n        for ota_index in range(65):\n            if target.ui.ui_common.is_element_exist_location('id', target.ui.home_page.OTA_ICON):\n                time.sleep(10)\n            else:\n                break\n            if ota_index == 64:\n                logger.info(\"====================================================================================\")\n                logger.info(\"ERROR : OTA fail after pairing!\")\n                logger.info(\"====================================================================================\")\n                target.ui.ui_common.screen_shot()\n                assert False, \"OTA fail!\"\n    \n        # check if light icon exist\n        if target.ui.ui_common.is_element_exist_location('xpath+id', e):\n            # go to light settings page to get light info\n            target.ui.home_page.click_light_icon(light_number)\n            target.ui.home_page.click_light_settings()\n    \n            # click light model and get light info\n            target.ui.light_settings_page.click_light_model()\n            light_info = target.ui.light_info_page.get_light_info()\n            time.sleep(2)\n    \n            # add config lamp info\n            if lamps[light_name][0] == light_info['MacAddr']:\n                # go back to light setting page\n                target.ui.light_info_page.go_back_from_model()\n    \n                # change light_name\n                target.ui.light_settings_page.change_light_name(light_name)\n                logger.info(\"change light name to \" + light_name)\n                time.sleep(2)\n                light_info['LampName'] = light_name\n                paired_light_info.append(light_info)\n    \n                # go back to home page\n                target.ui.light_settings_page.go_back_to_home()\n                logger.info(light_name + \" : \" + str(e))\n                logger.info(light_name + \" showed in App scream!\")\n                logger.info(paired_light_info)\n            else:\n                logger.info(\"====================================================================================\")\n                logger.info(\"ERROR : Manual pairing light \" + light_name + \" fail!\")\n                logger.info(\"====================================================================================\")\n                target.ui.ui_common.screen_shot()\n                assert False, \"manual pairing light fail, mac address is not equal\"\n        else:\n            logger.info(\"====================================================================================\")\n            logger.info(\"ERROR : No light showed in App scream! No light is found!\")\n            logger.info(\"====================================================================================\")\n            target.ui.ui_common.screen_shot()\n>           assert False, \"manual pairing light fail, no light is found\"\nE           AssertionError: manual pairing light fail, no light is found\n\n..\\..\\Steps\\pair_lamps_steps.py:660: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_Module__pytest_setup_module",
    "time" : {
      "start" : 1599207710666,
      "stop" : 1599207710666,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "pair_lamps_only_ble.feature: AP pairing only ble",
    "status" : "failed",
    "statusMessage" : "AssertionError: manual pairing light fail, no light is found",
    "statusTrace" : "request = <FixtureRequest for <Function test_ap_pair_lamps_only_ble>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\n..\\..\\..\\venv\\lib\\site-packages\\pytest_bdd\\scenario.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\venv\\lib\\site-packages\\pytest_bdd\\scenario.py:166: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n..\\..\\..\\venv\\lib\\site-packages\\pytest_bdd\\scenario.py:115: in _execute_step_function\n    step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x000001C8A6780DC8>\nlight_name = 'light_3'\n\n    @then(parsers.parse('check manual pairing {light_name} result'))\n    def check_manual_result(target, light_name):\n        \"\"\"\n        - Narrative:\n            check manual pairing result\n        \"\"\"\n        light_number = 1\n        paired_light_info = []\n        logger.info(\"check manual pairing result\")\n        # get lights from config file\n        lamps = target.config_para['lamps'].copy()\n        e = target.ui.home_page.get_light_icon(light_number)\n    \n        # check if ota icon exists\n        logger.info(\"check if ota icon exits\")\n        for ota_index in range(65):\n            if target.ui.ui_common.is_element_exist_location('id', target.ui.home_page.OTA_ICON):\n                time.sleep(10)\n            else:\n                break\n            if ota_index == 64:\n                logger.info(\"====================================================================================\")\n                logger.info(\"ERROR : OTA fail after pairing!\")\n                logger.info(\"====================================================================================\")\n                target.ui.ui_common.screen_shot()\n                assert False, \"OTA fail!\"\n    \n        # check if light icon exist\n        if target.ui.ui_common.is_element_exist_location('xpath+id', e):\n            # go to light settings page to get light info\n            target.ui.home_page.click_light_icon(light_number)\n            target.ui.home_page.click_light_settings()\n    \n            # click light model and get light info\n            target.ui.light_settings_page.click_light_model()\n            light_info = target.ui.light_info_page.get_light_info()\n            time.sleep(2)\n    \n            # add config lamp info\n            if lamps[light_name][0] == light_info['MacAddr']:\n                # go back to light setting page\n                target.ui.light_info_page.go_back_from_model()\n    \n                # change light_name\n                target.ui.light_settings_page.change_light_name(light_name)\n                logger.info(\"change light name to \" + light_name)\n                time.sleep(2)\n                light_info['LampName'] = light_name\n                paired_light_info.append(light_info)\n    \n                # go back to home page\n                target.ui.light_settings_page.go_back_to_home()\n                logger.info(light_name + \" : \" + str(e))\n                logger.info(light_name + \" showed in App scream!\")\n                logger.info(paired_light_info)\n            else:\n                logger.info(\"====================================================================================\")\n                logger.info(\"ERROR : Manual pairing light \" + light_name + \" fail!\")\n                logger.info(\"====================================================================================\")\n                target.ui.ui_common.screen_shot()\n                assert False, \"manual pairing light fail, mac address is not equal\"\n        else:\n            logger.info(\"====================================================================================\")\n            logger.info(\"ERROR : No light showed in App scream! No light is found!\")\n            logger.info(\"====================================================================================\")\n            target.ui.ui_common.screen_shot()\n>           assert False, \"manual pairing light fail, no light is found\"\nE           AssertionError: manual pairing light fail, no light is found\n\n..\\..\\Steps\\pair_lamps_steps.py:660: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "887364338e2cd36c",
      "name" : "log",
      "source" : "887364338e2cd36c.txt",
      "type" : "text/plain",
      "size" : 4948
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "_Module__pytest_setup_module::0",
    "time" : {
      "start" : 1599208191720,
      "stop" : 1599208202530,
      "duration" : 10810
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Pair lights only ble"
  }, {
    "name" : "story",
    "value" : "AP pairing only ble"
  }, {
    "name" : "tag",
    "value" : "usefixtures"
  }, {
    "name" : "parentSuite",
    "value" : "Test_Suites.Tests.test_function_with_app"
  }, {
    "name" : "suite",
    "value" : "test_pair_lamps_only_ble"
  }, {
    "name" : "host",
    "value" : "DESKTOP-UME284Q"
  }, {
    "name" : "thread",
    "value" : "1572860-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "Test_Suites.Tests.test_function_with_app.test_pair_lamps_only_ble"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "usefixtures" ]
  },
  "source" : "d1ef4b0008be2a61.json",
  "parameterValues" : [ ]
}