{"name": "test_ap_pair_lamps_only_wifi", "status": "failed", "statusDetails": {"message": "AssertionError: manual pairing light fail, no light is found", "trace": "request = <FixtureRequest for <Function test_ap_pair_lamps_only_wifi>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\n..\\..\\..\\venv\\lib\\site-packages\\pytest_bdd\\scenario.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\venv\\lib\\site-packages\\pytest_bdd\\scenario.py:166: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n..\\..\\..\\venv\\lib\\site-packages\\pytest_bdd\\scenario.py:115: in _execute_step_function\n    step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x0000018C7B750A08>\nlight_name = 'light_3'\n\n    @then(parsers.parse('check manual pairing {light_name} result'))\n    def check_manual_result(target, light_name):\n        \"\"\"\n        - Narrative:\n            check manual pairing result\n        \"\"\"\n        light_number = 1\n        paired_light_info = []\n        logger.info(\"check manual pairing result\")\n        # get lights from config file\n        lamps = target.config_para['lamps'].copy()\n        e = target.ui.home_page.get_light_icon(light_number)\n    \n        # check if ota icon exists\n        logger.info(\"check if ota icon exits\")\n        for ota_index in range(65):\n            if target.ui.ui_common.is_element_exist_location('id', target.ui.home_page.OTA_ICON):\n                time.sleep(10)\n            else:\n                break\n            if ota_index == 64:\n                logger.info(\"====================================================================================\")\n                logger.info(\"ERROR : OTA fail after pairing!\")\n                logger.info(\"====================================================================================\")\n                target.ui.ui_common.screen_shot()\n                assert False, \"OTA fail!\"\n    \n        # check if light icon exist\n        if target.ui.ui_common.is_element_exist_location('xpath+id', e):\n            # go to light settings page to get light info\n            target.ui.home_page.click_light_icon(light_number)\n            target.ui.home_page.click_light_settings()\n    \n            # click light model and get light info\n            target.ui.light_settings_page.click_light_model()\n            light_info = target.ui.light_info_page.get_light_info()\n            time.sleep(2)\n    \n            # add config lamp info\n            if lamps[light_name][0] == light_info['MacAddr']:\n                # go back to light setting page\n                target.ui.light_info_page.go_back_from_model()\n    \n                # change light_name\n                target.ui.light_settings_page.change_light_name(light_name)\n                logger.info(\"change light name to \" + light_name)\n                time.sleep(2)\n                light_info['LampName'] = light_name\n                paired_light_info.append(light_info)\n    \n                # go back to home page\n                target.ui.light_settings_page.go_back_to_home()\n                logger.info(light_name + \" : \" + str(e))\n                logger.info(light_name + \" showed in App scream!\")\n                logger.info(paired_light_info)\n            else:\n                logger.info(\"====================================================================================\")\n                logger.info(\"ERROR : Manual pairing light \" + light_name + \" fail!\")\n                logger.info(\"====================================================================================\")\n                target.ui.ui_common.screen_shot()\n                assert False, \"manual pairing light fail, mac address is not equal\"\n        else:\n            logger.info(\"====================================================================================\")\n            logger.info(\"ERROR : No light showed in App scream! No light is found!\")\n            logger.info(\"====================================================================================\")\n            target.ui.ui_common.screen_shot()\n>           assert False, \"manual pairing light fail, no light is found\"\nE           AssertionError: manual pairing light fail, no light is found\n\n..\\..\\Steps\\pair_lamps_steps.py:660: AssertionError"}, "description": "pair_lamps_only_wifi.feature: AP pairing only wifi", "attachments": [{"name": "log", "source": "daaa3017-a532-4123-8479-b9545dff332b-attachment.txt", "type": "text/plain"}], "start": 1599209895303, "stop": 1599210004463, "uuid": "c8efa9ae-604f-4f36-9ef7-a9ec14faa05a", "historyId": "13a576bc727a139a0e4c4198b81a1798", "testCaseId": "fc7e3e52ae60633f812dec8a84043264", "fullName": "Test_Suites.Tests.test_function_with_app.test_pair_lamps_only_wifi#test_ap_pair_lamps_only_wifi", "labels": [{"name": "story", "value": "AP pairing only wifi"}, {"name": "feature", "value": "Pair lights only wifi"}, {"name": "tag", "value": "usefixtures"}, {"name": "parentSuite", "value": "Test_Suites.Tests.test_function_with_app"}, {"name": "suite", "value": "test_pair_lamps_only_wifi"}, {"name": "host", "value": "DESKTOP-UME284Q"}, {"name": "thread", "value": "1562220-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Suites.Tests.test_function_with_app.test_pair_lamps_only_wifi"}]}