{"name": "test_single_light_control_temperature", "status": "failed", "statusDetails": {"message": "AssertionError: check light_1 change temperature fail! should be 2700, but was 2200", "trace": "request = <FixtureRequest for <Function test_single_light_control_temperature>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:145: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:115: in _execute_step_function\n    return_value = step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x0000013F77399848>\nlight_name = 'light_1', temperature = '2700'\n\n    @when(parsers.parse('Check if {light_name} temperature is changed to {temperature}'))\n    def check_light_temperature(target, light_name, temperature):\n        \"\"\"\n        - Narrative:\n            check {light_name} {speed} status from light\n        \"\"\"\n    \n        logger.info(\"check light temperature\")\n        response = target.udp.get_pilot_phone(light_name)\n        logger.info(response)\n        actul_temperature = int(response[\"result\"][\"temp\"])\n    \n        if int(actul_temperature) == int(temperature):\n            logger.info(light_name + \" is changed to \" + str(temperature) + \" successfully!\")\n        else:\n            logger.info(\"Error : check \" + light_name + \" change temperature fail! should be \" + str(temperature) +\n                        \", but was \" + str(actul_temperature))\n            assert False, \"check \" + light_name + \" change temperature fail! should be \" + str(temperature) + \\\n>                         \", but was \" + str(actul_temperature)\nE           AssertionError: check light_1 change temperature fail! should be 2700, but was 2200\n\n..\\..\\Steps\\control_lamp_steps.py:686: AssertionError"}, "description": "single_light_control_by_udp.feature: Single light control --- Temperature", "attachments": [{"name": "log", "source": "055929f3-cd2b-4703-b9bc-9228b81c308d-attachment.txt", "type": "text/plain"}], "start": 1602741314801, "stop": 1602741318827, "uuid": "24d72073-3632-4952-a0db-893eed26c792", "historyId": "d8ba3743a8fa88ca37e72913ce743ba4", "testCaseId": "290c31cb552d5de83bebe4cdaa5780d4", "fullName": "Test_Suites.Tests.test_regression_product.test_05_single_lamp_control_by_udp#test_single_light_control_temperature", "labels": [{"name": "feature", "value": "Single Lamp Control"}, {"name": "tag", "value": "@pytest.mark.usefixtures"}, {"name": "parentSuite", "value": "Test_Suites.Tests.test_regression_product"}, {"name": "suite", "value": "test_05_single_lamp_control_by_udp"}, {"name": "host", "value": "DESKTOP-UME284Q"}, {"name": "thread", "value": "38532-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Suites.Tests.test_regression_product.test_05_single_lamp_control_by_udp"}]}