{
  "uid" : "5e1a6a76b63fc698",
  "name" : "test_single_light_control_temperature",
  "fullName" : "Test_Suites.Tests.test_regression_product.test_05_single_lamp_control_by_udp#test_single_light_control_temperature",
  "historyId" : "d8ba3743a8fa88ca37e72913ce743ba4",
  "time" : {
    "start" : 1602741591318,
    "stop" : 1602741591370,
    "duration" : 52
  },
  "description" : "single_light_control_by_udp.feature: Single light control --- Temperature",
  "descriptionHtml" : "<p>single_light_control_by_udp.feature: Single light control --- Temperature</p>\n",
  "status" : "broken",
  "statusMessage" : "serial.serialutil.SerialException: could not open port 'COM4': PermissionError(13, 'Access is denied.', None, 5)",
  "statusTrace" : "request = <FixtureRequest for <Function test_single_light_control_temperature>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:145: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:109: in _execute_step_function\n    kwargs = dict((arg, request.getfixturevalue(arg)) for arg in get_args(step_func))\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:109: in <genexpr>\n    kwargs = dict((arg, request.getfixturevalue(arg)) for arg in get_args(step_func))\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:581: in getfixturevalue\n    fixturedef = self._get_active_fixturedef(argname)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:601: in _get_active_fixturedef\n    self._compute_fixture_value(fixturedef)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:683: in _compute_fixture_value\n    fixturedef.execute(request=subrequest)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:1062: in execute\n    result = hook.pytest_fixture_setup(fixturedef=self, request=request)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pluggy\\manager.py:87: in <lambda>\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:1117: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:924: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n..\\conftest.py:55: in target\n    return WrapperManage(app, para)\n..\\..\\..\\Wrapper\\wrapper_manage.py:30: in __init__\n    self.light_serial[key] = WrapperSerial(parameters).light_serial(key)\n..\\..\\..\\Wrapper\\wrapper_serial.py:18: in light_serial\n    return SerialPort(serial_port, baud_rate, light_name)\n..\\..\\..\\Utils\\serial_comm.py:41: in __init__\n    self.open()\n..\\..\\..\\Utils\\serial_comm.py:44: in open\n    self.ser.open()  # open port\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Serial<id=0x28cf70cdd08, open=False>(port='COM4', baudrate=115200, bytesize=8, parity='N', stopbits=1, timeout=None, xonxoff=False, rtscts=False, dsrdtr=False)\n\n    def open(self):\n        \"\"\"\\\n        Open port with current settings. This may throw a SerialException\n        if the port cannot be opened.\n        \"\"\"\n        if self._port is None:\n            raise SerialException(\"Port must be configured before it can be used.\")\n        if self.is_open:\n            raise SerialException(\"Port is already open.\")\n        # the \"\\\\.\\COMx\" format is required for devices other than COM1-COM8\n        # not all versions of windows seem to support this properly\n        # so that the first few ports are used with the DOS device name\n        port = self.name\n        try:\n            if port.upper().startswith('COM') and int(port[3:]) > 8:\n                port = '\\\\\\\\.\\\\' + port\n        except ValueError:\n            # for like COMnotanumber\n            pass\n        self._port_handle = win32.CreateFile(\n            port,\n            win32.GENERIC_READ | win32.GENERIC_WRITE,\n            0,  # exclusive access\n            None,  # no security\n            win32.OPEN_EXISTING,\n            win32.FILE_ATTRIBUTE_NORMAL | win32.FILE_FLAG_OVERLAPPED,\n            0)\n        if self._port_handle == win32.INVALID_HANDLE_VALUE:\n            self._port_handle = None    # 'cause __del__ is called anyway\n>           raise SerialException(\"could not open port {!r}: {!r}\".format(self.portstr, ctypes.WinError()))\nE           serial.serialutil.SerialException: could not open port 'COM4': PermissionError(13, 'Access is denied.', None, 5)\n\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\serial\\serialwin32.py:62: SerialException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_Module__pytest_setup_module",
    "time" : {
      "start" : 1602741591318,
      "stop" : 1602741591318,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "single_light_control_by_udp.feature: Single light control --- Temperature",
    "status" : "broken",
    "statusMessage" : "serial.serialutil.SerialException: could not open port 'COM4': PermissionError(13, 'Access is denied.', None, 5)",
    "statusTrace" : "request = <FixtureRequest for <Function test_single_light_control_temperature>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:145: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:109: in _execute_step_function\n    kwargs = dict((arg, request.getfixturevalue(arg)) for arg in get_args(step_func))\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:109: in <genexpr>\n    kwargs = dict((arg, request.getfixturevalue(arg)) for arg in get_args(step_func))\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:581: in getfixturevalue\n    fixturedef = self._get_active_fixturedef(argname)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:601: in _get_active_fixturedef\n    self._compute_fixture_value(fixturedef)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:683: in _compute_fixture_value\n    fixturedef.execute(request=subrequest)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:1062: in execute\n    result = hook.pytest_fixture_setup(fixturedef=self, request=request)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pluggy\\manager.py:87: in <lambda>\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:1117: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:924: in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n..\\conftest.py:55: in target\n    return WrapperManage(app, para)\n..\\..\\..\\Wrapper\\wrapper_manage.py:30: in __init__\n    self.light_serial[key] = WrapperSerial(parameters).light_serial(key)\n..\\..\\..\\Wrapper\\wrapper_serial.py:18: in light_serial\n    return SerialPort(serial_port, baud_rate, light_name)\n..\\..\\..\\Utils\\serial_comm.py:41: in __init__\n    self.open()\n..\\..\\..\\Utils\\serial_comm.py:44: in open\n    self.ser.open()  # open port\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Serial<id=0x28cf70cdd08, open=False>(port='COM4', baudrate=115200, bytesize=8, parity='N', stopbits=1, timeout=None, xonxoff=False, rtscts=False, dsrdtr=False)\n\n    def open(self):\n        \"\"\"\\\n        Open port with current settings. This may throw a SerialException\n        if the port cannot be opened.\n        \"\"\"\n        if self._port is None:\n            raise SerialException(\"Port must be configured before it can be used.\")\n        if self.is_open:\n            raise SerialException(\"Port is already open.\")\n        # the \"\\\\.\\COMx\" format is required for devices other than COM1-COM8\n        # not all versions of windows seem to support this properly\n        # so that the first few ports are used with the DOS device name\n        port = self.name\n        try:\n            if port.upper().startswith('COM') and int(port[3:]) > 8:\n                port = '\\\\\\\\.\\\\' + port\n        except ValueError:\n            # for like COMnotanumber\n            pass\n        self._port_handle = win32.CreateFile(\n            port,\n            win32.GENERIC_READ | win32.GENERIC_WRITE,\n            0,  # exclusive access\n            None,  # no security\n            win32.OPEN_EXISTING,\n            win32.FILE_ATTRIBUTE_NORMAL | win32.FILE_FLAG_OVERLAPPED,\n            0)\n        if self._port_handle == win32.INVALID_HANDLE_VALUE:\n            self._port_handle = None    # 'cause __del__ is called anyway\n>           raise SerialException(\"could not open port {!r}: {!r}\".format(self.portstr, ctypes.WinError()))\nE           serial.serialutil.SerialException: could not open port 'COM4': PermissionError(13, 'Access is denied.', None, 5)\n\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\serial\\serialwin32.py:62: SerialException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "4d247e0512c24aea",
      "name" : "log",
      "source" : "4d247e0512c24aea.txt",
      "type" : "text/plain",
      "size" : 1205
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "_Module__pytest_setup_module::0",
    "time" : {
      "start" : 1602741591569,
      "stop" : 1602741599421,
      "duration" : 7852
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Single Lamp Control"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures"
  }, {
    "name" : "parentSuite",
    "value" : "Test_Suites.Tests.test_regression_product"
  }, {
    "name" : "suite",
    "value" : "test_05_single_lamp_control_by_udp"
  }, {
    "name" : "host",
    "value" : "DESKTOP-UME284Q"
  }, {
    "name" : "thread",
    "value" : "34964-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "Test_Suites.Tests.test_regression_product.test_05_single_lamp_control_by_udp"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "@pytest.mark.usefixtures" ]
  },
  "source" : "5e1a6a76b63fc698.json",
  "parameterValues" : [ ]
}