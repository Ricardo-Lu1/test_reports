{
  "uid" : "3ef5ab930382cee5",
  "name" : "test_tcp_comm_on_off_nl[light_1-OFF1]",
  "fullName" : "Test_Suites.Tests.test_regression_product.test_06_tcp_comm#test_tcp_comm_on_off_nl",
  "historyId" : "f0309e7589c1d6dffb5850b6507ed68b",
  "time" : {
    "start" : 1602837332473,
    "stop" : 1602837345582,
    "duration" : 13109
  },
  "description" : "tcp_comm.feature: Single light control by mqtt --- ON/OFF/NL",
  "descriptionHtml" : "<p>tcp_comm.feature: Single light control by mqtt --- ON/OFF/NL</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: UDP state should be false, but was true",
  "statusTrace" : "request = <FixtureRequest for <Function test_tcp_comm_on_off_nl[light_1-OFF1]>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:145: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:115: in _execute_step_function\n    return_value = step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x00000180C723F888>\nlight_name = 'light_1', action = 'OFF'\n\n    @when(parsers.parse('Check if {light_name} is turned to {action}'))\n    def check_light_on_off_nl(target, light_name, action):\n        \"\"\"\n        - Narrative:\n            check {light_name} is turned to {action} from light\n        \"\"\"\n        logger.info(\"check light status\")\n        response = target.udp.get_pilot_phone(light_name)\n        logger.info(response)\n    \n        if action == 'ON':\n            if response[\"result\"][\"state\"] is True:\n                pass\n            else:\n                logger.info(\"Error : UDP state should be true, but was false\")\n                assert False, \"UDP state should be true, but was false\"\n        elif action == 'OFF':\n            if response[\"result\"][\"state\"] is False:\n                pass\n            else:\n                logger.info(\"Error : UDP state should be false, but was true\")\n>               assert False, \"UDP state should be false, but was true\"\nE               AssertionError: UDP state should be false, but was true\n\n..\\..\\Steps\\control_lamp_steps.py:605: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "tcp_comm.feature: Single light control by mqtt --- ON/OFF/NL",
    "status" : "failed",
    "statusMessage" : "AssertionError: UDP state should be false, but was true",
    "statusTrace" : "request = <FixtureRequest for <Function test_tcp_comm_on_off_nl[light_1-OFF1]>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:145: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:115: in _execute_step_function\n    return_value = step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x00000180C723F888>\nlight_name = 'light_1', action = 'OFF'\n\n    @when(parsers.parse('Check if {light_name} is turned to {action}'))\n    def check_light_on_off_nl(target, light_name, action):\n        \"\"\"\n        - Narrative:\n            check {light_name} is turned to {action} from light\n        \"\"\"\n        logger.info(\"check light status\")\n        response = target.udp.get_pilot_phone(light_name)\n        logger.info(response)\n    \n        if action == 'ON':\n            if response[\"result\"][\"state\"] is True:\n                pass\n            else:\n                logger.info(\"Error : UDP state should be true, but was false\")\n                assert False, \"UDP state should be true, but was false\"\n        elif action == 'OFF':\n            if response[\"result\"][\"state\"] is False:\n                pass\n            else:\n                logger.info(\"Error : UDP state should be false, but was true\")\n>               assert False, \"UDP state should be false, but was true\"\nE               AssertionError: UDP state should be false, but was true\n\n..\\..\\Steps\\control_lamp_steps.py:605: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "716b353ac0c6f646",
      "name" : "log",
      "source" : "716b353ac0c6f646.txt",
      "type" : "text/plain",
      "size" : 2052
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "TCP Communication"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('action', 'light_name')"
  }, {
    "name" : "parentSuite",
    "value" : "Test_Suites.Tests.test_regression_product"
  }, {
    "name" : "suite",
    "value" : "test_06_tcp_comm"
  }, {
    "name" : "host",
    "value" : "DESKTOP-UME284Q"
  }, {
    "name" : "thread",
    "value" : "187868-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "Test_Suites.Tests.test_regression_product.test_06_tcp_comm"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "action",
    "value" : "'OFF'"
  }, {
    "name" : "light_name",
    "value" : "'light_1'"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "@pytest.mark.usefixtures('action', 'light_name')" ]
  },
  "source" : "3ef5ab930382cee5.json",
  "parameterValues" : [ "'OFF'", "'light_1'" ]
}