{"name": "test_tcp_comm_on_off_nl[light_1-NL1]", "status": "broken", "statusDetails": {"message": "TypeError: can only concatenate str (not \"int\") to str", "trace": "request = <FixtureRequest for <Function test_tcp_comm_on_off_nl[light_1-NL1]>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:145: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:115: in _execute_step_function\n    return_value = step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x00000180C723F888>\nlight_name = 'light_1', action = 'NL'\n\n    @when(parsers.parse('Check if {light_name} is turned to {action}'))\n    def check_light_on_off_nl(target, light_name, action):\n        \"\"\"\n        - Narrative:\n            check {light_name} is turned to {action} from light\n        \"\"\"\n        logger.info(\"check light status\")\n        response = target.udp.get_pilot_phone(light_name)\n        logger.info(response)\n    \n        if action == 'ON':\n            if response[\"result\"][\"state\"] is True:\n                pass\n            else:\n                logger.info(\"Error : UDP state should be true, but was false\")\n                assert False, \"UDP state should be true, but was false\"\n        elif action == 'OFF':\n            if response[\"result\"][\"state\"] is False:\n                pass\n            else:\n                logger.info(\"Error : UDP state should be false, but was true\")\n                assert False, \"UDP state should be false, but was true\"\n        elif action == \"NL\":\n            if response[\"result\"][\"state\"] is True:\n                if response[\"result\"][\"sceneId\"] == 14:\n                    pass\n                else:\n>                   logger.info(\"Error : UDP sceneID should be 14, but was \" + response[\"result\"][\"sceneId\"])\nE                   TypeError: can only concatenate str (not \"int\") to str\n\n..\\..\\Steps\\control_lamp_steps.py:611: TypeError"}, "description": "tcp_comm.feature: Single light control by mqtt --- ON/OFF/NL", "attachments": [{"name": "log", "source": "fa829275-e4e7-41e4-91a1-451db1cd4fa4-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "light_name", "value": "'light_1'"}, {"name": "action", "value": "'NL'"}], "start": 1602837345622, "stop": 1602837358705, "uuid": "6d819583-8aab-46c5-9e21-6df4139cd583", "historyId": "5c2eb8e903d59a77222a8303ebc3fb23", "testCaseId": "29592337e7f4b91c0c45ed944305149f", "fullName": "Test_Suites.Tests.test_regression_product.test_06_tcp_comm#test_tcp_comm_on_off_nl", "labels": [{"name": "feature", "value": "TCP Communication"}, {"name": "tag", "value": "@pytest.mark.usefixtures('action', 'light_name')"}, {"name": "parentSuite", "value": "Test_Suites.Tests.test_regression_product"}, {"name": "suite", "value": "test_06_tcp_comm"}, {"name": "host", "value": "DESKTOP-UME284Q"}, {"name": "thread", "value": "187868-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Suites.Tests.test_regression_product.test_06_tcp_comm"}]}