{"name": "test_28_create_two_schedules_of_two_intersecting_time_periods", "status": "failed", "statusDetails": {"message": "AssertionError: UDP state should be false, but was true", "trace": "request = <FixtureRequest for <Function test_28_create_two_schedules_of_two_intersecting_time_periods>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:145: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:115: in _execute_step_function\n    return_value = step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x0000017EC5415B48>\nlight_name = 'light_1', action = 'OFF'\n\n    @then(parsers.parse('check {light_name} status is {action}'))\n    def check_light_status(target, light_name, action):\n        # check the status from light\n        logger.info(\"check light status\")\n        response = target.udp.get_pilot_phone(light_name)\n        logger.info(response)\n    \n        if action == 'ON':\n            if response[\"result\"][\"state\"] is not True:\n                logger.info(\"Error : UDP state should be true, but was false\")\n                assert False, \"UDP state should be true, but was false\"\n        elif action == 'OFF':\n            if response[\"result\"][\"state\"] is not False:\n                logger.info(\"Error : UDP state should be false, but was true\")\n>               assert False, \"UDP state should be false, but was true\"\nE               AssertionError: UDP state should be false, but was true\n\n..\\..\\Steps\\schedule_action_steps.py:245: AssertionError"}, "description": "schedule_actions.feature: Create 2 schedules of two intersecting time periods", "attachments": [{"name": "log", "source": "b48a4a59-be7d-4864-86b6-b5bb7a199402-attachment.txt", "type": "text/plain"}], "start": 1604336068458, "stop": 1604337028902, "uuid": "7e3b3e63-0e56-4cbb-9e21-c539a7c1ace1", "historyId": "9b99d1a34e2ddc61a2093bb5612bb028", "testCaseId": "028aba5c978c50a36355ee2dc636c536", "fullName": "Test_Suites.Tests.test_regression_product.test_07_schedule_by_mqtt#test_28_create_two_schedules_of_two_intersecting_time_periods", "labels": [{"name": "story", "value": "Create 2 schedules of two intersecting time periods"}, {"name": "feature", "value": "Create schedule by mqtt"}, {"name": "tag", "value": "@pytest.mark.usefixtures"}, {"name": "parentSuite", "value": "Test_Suites.Tests.test_regression_product"}, {"name": "suite", "value": "test_07_schedule_by_mqtt"}, {"name": "host", "value": "DESKTOP-UME284Q"}, {"name": "thread", "value": "602788-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Suites.Tests.test_regression_product.test_07_schedule_by_mqtt"}]}