{
  "uid" : "4276ad84ee343401",
  "name" : "test_28_create_two_schedules_of_two_intersecting_time_periods",
  "fullName" : "Test_Suites.Tests.test_regression_product.test_07_schedule_by_mqtt#test_28_create_two_schedules_of_two_intersecting_time_periods",
  "historyId" : "9b99d1a34e2ddc61a2093bb5612bb028",
  "time" : {
    "start" : 1604336068458,
    "stop" : 1604337028902,
    "duration" : 960444
  },
  "description" : "schedule_actions.feature: Create 2 schedules of two intersecting time periods",
  "descriptionHtml" : "<p>schedule_actions.feature: Create 2 schedules of two intersecting time periods</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: UDP state should be false, but was true",
  "statusTrace" : "request = <FixtureRequest for <Function test_28_create_two_schedules_of_two_intersecting_time_periods>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:145: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:115: in _execute_step_function\n    return_value = step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x0000017EC5415B48>\nlight_name = 'light_1', action = 'OFF'\n\n    @then(parsers.parse('check {light_name} status is {action}'))\n    def check_light_status(target, light_name, action):\n        # check the status from light\n        logger.info(\"check light status\")\n        response = target.udp.get_pilot_phone(light_name)\n        logger.info(response)\n    \n        if action == 'ON':\n            if response[\"result\"][\"state\"] is not True:\n                logger.info(\"Error : UDP state should be true, but was false\")\n                assert False, \"UDP state should be true, but was false\"\n        elif action == 'OFF':\n            if response[\"result\"][\"state\"] is not False:\n                logger.info(\"Error : UDP state should be false, but was true\")\n>               assert False, \"UDP state should be false, but was true\"\nE               AssertionError: UDP state should be false, but was true\n\n..\\..\\Steps\\schedule_action_steps.py:245: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_Module__pytest_setup_module",
    "time" : {
      "start" : 1604306422623,
      "stop" : 1604306422623,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "description" : "schedule_actions.feature: Create 2 schedules of two intersecting time periods",
    "status" : "failed",
    "statusMessage" : "AssertionError: UDP state should be false, but was true",
    "statusTrace" : "request = <FixtureRequest for <Function test_28_create_two_schedules_of_two_intersecting_time_periods>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:145: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\600008165\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:115: in _execute_step_function\n    return_value = step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x0000017EC5415B48>\nlight_name = 'light_1', action = 'OFF'\n\n    @then(parsers.parse('check {light_name} status is {action}'))\n    def check_light_status(target, light_name, action):\n        # check the status from light\n        logger.info(\"check light status\")\n        response = target.udp.get_pilot_phone(light_name)\n        logger.info(response)\n    \n        if action == 'ON':\n            if response[\"result\"][\"state\"] is not True:\n                logger.info(\"Error : UDP state should be true, but was false\")\n                assert False, \"UDP state should be true, but was false\"\n        elif action == 'OFF':\n            if response[\"result\"][\"state\"] is not False:\n                logger.info(\"Error : UDP state should be false, but was true\")\n>               assert False, \"UDP state should be false, but was true\"\nE               AssertionError: UDP state should be false, but was true\n\n..\\..\\Steps\\schedule_action_steps.py:245: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "ec63cf1a221ba58c",
      "name" : "log",
      "source" : "ec63cf1a221ba58c.txt",
      "type" : "text/plain",
      "size" : 86495
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ {
    "name" : "_Module__pytest_setup_module::0",
    "time" : {
      "start" : 1604345325485,
      "stop" : 1604345340666,
      "duration" : 15181
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Create 2 schedules of two intersecting time periods"
  }, {
    "name" : "feature",
    "value" : "Create schedule by mqtt"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures"
  }, {
    "name" : "parentSuite",
    "value" : "Test_Suites.Tests.test_regression_product"
  }, {
    "name" : "suite",
    "value" : "test_07_schedule_by_mqtt"
  }, {
    "name" : "host",
    "value" : "DESKTOP-UME284Q"
  }, {
    "name" : "thread",
    "value" : "602788-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "Test_Suites.Tests.test_regression_product.test_07_schedule_by_mqtt"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "@pytest.mark.usefixtures" ]
  },
  "source" : "4276ad84ee343401.json",
  "parameterValues" : [ ]
}