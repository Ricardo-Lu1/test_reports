{"name": "test_12_create_schedule_with_warm_white_end_with_off_when_lamp_status_off", "status": "failed", "statusDetails": {"message": "AssertionError: Error : MQTT did not get syncPilot from device!", "trace": "request = <FixtureRequest for <Function test_12_create_schedule_with_warm_white_end_with_off_when_lamp_status_off>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:189: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:130: in _execute_step_function\n    step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x00000281784E7788>\nlight_name = 'light_1', light_scene = 'Warm white'\n\n    @then(parsers.parse('check schedule for {light_name} with {light_scene} mode'))\n    def check_schedule(target, light_name, light_scene):\n        mqtt_res = target.mqtt.get_res_mqtt_sync_pilot(light_name)\n        response = target.udp.get_pilot_phone(light_name)\n        logger.info(\"udp response:\" + str(response))\n    \n        expect_light_scene_id = int(translator_scene_id(light_scene))\n    \n        # check by udp\n        res_light_scene_id_udp = response[\"result\"][\"sceneId\"]\n        if response[\"result\"][\"state\"] is False:\n            logger.info(\"Error : UDP state should be true, but was false\")\n            assert False, \"UDP state should be true, but was false\"\n        if res_light_scene_id_udp != expect_light_scene_id:\n            logger.info(\"Error : create schedule for \" + light_name + \" fail! UDP SceneId should be \" +\n                        str(expect_light_scene_id) + \", but was \" + str(res_light_scene_id_udp))\n            assert False, \"Error : create schedule for \" + light_name + \" fail! UDP SceneId should be \" + \\\n                          str(expect_light_scene_id) + \", but was \" + str(res_light_scene_id_udp)\n    \n        # check by mqtt\n        if mqtt_res is None:\n            logger.info(\"Error : MQTT did not get syncPilot from device!\")\n>           assert False, \"Error : MQTT did not get syncPilot from device!\"\nE           AssertionError: Error : MQTT did not get syncPilot from device!\n\n..\\..\\Steps\\schedule_action_steps.py:443: AssertionError"}, "description": "schedule.feature: Create a schedule with action \"Warm White\" and end with \"Off\" when lamp original status is off", "attachments": [{"name": "log", "source": "ef20f4d2-eb3b-4c5d-8a32-1b35da00f54f-attachment.txt", "type": "text/plain"}], "start": 1605779399933, "stop": 1605779728337, "uuid": "a671c399-4c1d-436a-acd5-016b97c943d0", "historyId": "5cfff6b6ec1ba091e4715df10ad3fc6c", "testCaseId": "410f77597f6e063649e4f2ae4957a5a1", "fullName": "Test_Suites.Tests.test_regression_module.test_08_schedule_by_mqtt#test_12_create_schedule_with_warm_white_end_with_off_when_lamp_status_off", "labels": [{"name": "story", "value": "Create a schedule with action \"Warm White\" and end with \"Off\" when lamp original status is off"}, {"name": "feature", "value": "Create schedule by mqtt"}, {"name": "tag", "value": "usefixtures"}, {"name": "parentSuite", "value": "Test_Suites.Tests.test_regression_module"}, {"name": "suite", "value": "test_08_schedule_by_mqtt"}, {"name": "host", "value": "WIZ-LENOVOPT-SH0012"}, {"name": "thread", "value": "27104-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Suites.Tests.test_regression_module.test_08_schedule_by_mqtt"}]}