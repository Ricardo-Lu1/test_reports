{"name": "test_04_select_rhythm_by_mqtt", "status": "failed", "statusDetails": {"message": "AssertionError: Error : check scene id by udp fail! Scene id should be 18, but was 12", "trace": "request = <FixtureRequest for <Function test_04_select_rhythm_by_mqtt>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:189: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:130: in _execute_step_function\n    step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x000001258CB1EC88>\nrhythm_id = 2, light_name = 'light_1', scene_name = 'TV time'\n\n    @then(parsers.parse('check rhythm {rhythm_id} for {light_name} with scene {scene_name}'))\n    def check_rhythm(target, rhythm_id, light_name, scene_name):\n        time.sleep(5)\n        rhythm_id = int(rhythm_id)\n        scene_id = int(translator_scene_id(scene_name))\n    \n        # udp_sync_res = target.udp.get_udp_sync_pilot(light_name, \"intl\")\n        # logger.info(\"udp syncPilot:\" + str(udp_sync_res))\n    \n        # mqtt_res = target.mqtt.get_mqtt_sync_pilot(light_name)\n        # if mqtt_res is None:\n        #     logger.info(\"Error : MQTT did not get syncPilot from device!\")\n        #     assert False, \"Error : MQTT did not get syncPilot from device!\"\n        # else:\n        #     logger.info(\"mqtt syncPilot:\" + str(mqtt_res))\n    \n        res_get_pilot = target.udp.get_pilot(light_name)\n        logger.info(\"udp response:\" + str(res_get_pilot))\n    \n        scene_id_udp = int(res_get_pilot[\"result\"][\"sceneId\"])\n        # scene_id_udp_sync = int(udp_sync_res[\"params\"][\"sceneId\"])\n        # scene_id_mqtt = int(mqtt_res[\"params\"][\"sceneId\"])\n    \n        # check by udp syncPilot cmd\n        # if \"schdPsetId\" in json_to_string(udp_sync_res):\n        #     schdpset_id_udp_sync = int(udp_sync_res[\"params\"][\"schdPsetId\"])\n        # else:\n        #     logger.info(\"Error : Error : check schdPset id by udp syncPilot fail! Do not find schdPsetId.\")\n        #     assert False, \"Error : Error : check schdPset id by udp syncPilot fail! Do not find schdPsetId.\"\n        # if scene_id_udp_sync != scene_id:\n        #     logger.info(\"Error : check scene id by udp syncPilot fail! Scene id should be \"\n        #                 + str(scene_id) + \", but was \" + str(scene_id_udp_sync))\n        #     assert False, \"Error : check scene id by udp syncPilot fail! Scene id should be \" \\\n        #                   + str(scene_id) + \", but was \" + str(scene_id_udp_sync)\n        # if schdpset_id_udp_sync != rhythm_id:\n        #     logger.info(\"Error : check schdPset id by udp syncPilot fail! SchdPset id should be \" + str(rhythm_id)\n        #                 + \", but was \" + str(schdpset_id_udp_sync))\n        #     assert False, \"Error : check schdPset id by udp syncPilot fail! SchdPset id should be \" + str(rhythm_id) \\\n        #                   + \", but was \" + str(schdpset_id_udp_sync)\n    \n        # check by mqtt syncPilot cmd\n        # if \"schdPsetId\" in json_to_string(mqtt_res):\n        #     schdpset_id_mqtt = int(mqtt_res[\"params\"][\"schdPsetId\"])\n        # else:\n        #     logger.info(\"Error : Error : check schdPset id by mqtt syncPilot fail! Do not find schdPsetId.\")\n        #     assert False, \"Error : Error : check schdPset id by mqtt syncPilot fail! Do not find schdPsetId.\"\n        # if scene_id_mqtt != scene_id:\n        #     logger.info(\"Error : check scene id by mqtt syncPilot fail! Scene id should be \"\n        #                 + str(scene_id) + \", but was \" + str(scene_id_mqtt))\n        #     assert False, \"Error : check scene id by mqtt syncPilot fail! Scene id should be \" \\\n        #                   + str(scene_id) + \", but was \" + str(scene_id_mqtt)\n        # if schdpset_id_mqtt != rhythm_id:\n        #     logger.info(\"Error : check schdPset id by mqtt syncPilot fail! SchdPset id should be \" + str(rhythm_id)\n        #                 + \", but was \" + str(schdpset_id_mqtt))\n        #     assert False, \"Error : check schdPset id by mqtt syncPilot fail! SchdPset id should be \" + str(rhythm_id) \\\n        #                   + \", but was \" + str(schdpset_id_mqtt)\n    \n        # check by udp getPilot cmd\n        if \"schdPsetId\" in json_to_string(res_get_pilot):\n            schdpset_id_udp = int(res_get_pilot[\"result\"][\"schdPsetId\"])\n        else:\n            logger.info(\"Error : Error : check schdPset id by udp fail! Do not find schdPsetId.\")\n            assert False, \"Error : Error : check schdPset id by udp fail! Do not find schdPsetId.\"\n        if scene_id_udp != scene_id:\n            logger.info(\"Error : check scene id by udp fail! Scene id should be \"\n                        + str(scene_id) + \", but was \" + str(scene_id_udp))\n            assert False, \"Error : check scene id by udp fail! Scene id should be \" \\\n>                         + str(scene_id) + \", but was \" + str(scene_id_udp)\nE           AssertionError: Error : check scene id by udp fail! Scene id should be 18, but was 12\n\n..\\..\\Steps\\rhythm_action_steps.py:191: AssertionError"}, "description": "rhythm.feature: Select rhythm by mqtt", "attachments": [{"name": "log", "source": "14e87959-1f26-417a-9259-c75823cfaf50-attachment.txt", "type": "text/plain"}], "start": 1611277002080, "stop": 1611277061253, "uuid": "0bd9dc17-f2fc-4802-a8f0-12c315b2dd7e", "historyId": "c24b1e210335e8c54c7ab783466fb9ad", "testCaseId": "af83d44526b00ce95a985c2df9c82147", "fullName": "Test_Suites.Tests.test_regression_module.test_09_rhythm_by_mqtt#test_04_select_rhythm_by_mqtt", "labels": [{"name": "story", "value": "Select rhythm by mqtt"}, {"name": "feature", "value": "Test cases for rhythm"}, {"name": "tag", "value": "usefixtures"}, {"name": "parentSuite", "value": "Test_Suites.Tests.test_regression_module"}, {"name": "suite", "value": "test_09_rhythm_by_mqtt"}, {"name": "host", "value": "WIZ-LENOVOPT-SH0012"}, {"name": "thread", "value": "25308-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Suites.Tests.test_regression_module.test_09_rhythm_by_mqtt"}]}