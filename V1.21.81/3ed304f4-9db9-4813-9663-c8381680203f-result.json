{"name": "test_29_create_two_schedules_of_two_consecutive_periods_schedule1_end_with_previous_mode_schedule2_no_end", "status": "failed", "statusDetails": {"message": "AssertionError: UDP syncPilot state should be true, but was false", "trace": "request = <FixtureRequest for <Function test_29_create_two_schedules_of_two_consecutive_periods_schedule1_end_with_previous_mode_schedule2_no_end>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nc:\\users\\ricardo.lu\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\pytest_bdd\\scenario.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nc:\\users\\ricardo.lu\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\pytest_bdd\\scenario.py:189: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nc:\\users\\ricardo.lu\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\pytest_bdd\\scenario.py:130: in _execute_step_function\n    step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x00000171EFB90A88>\nlight_name = 'light_1', light_scene = 'Cool white'\n\n    @then(parsers.parse('check schedule for {light_name} with {light_scene} mode by udp syncPilot'))\n    def check_schedule_by_udp_syncPilot(target, light_name, light_scene):\n        udp_sync_res = target.udp.get_udp_sync_pilot(light_name, \"schd\")\n        logger.info(\"udp syncPilot:\" + str(udp_sync_res))\n    \n        expect_light_scene_id = int(translator_scene_id(light_scene))\n    \n        # check by udp syncPilot\n        res_light_scene_id_udp_sync = udp_sync_res[\"params\"][\"sceneId\"]\n        if udp_sync_res[\"params\"][\"state\"] is False:\n            logger.info(\"Error : UDP syncPilot state should be true, but was false\")\n>           assert False, \"UDP syncPilot state should be true, but was false\"\nE           AssertionError: UDP syncPilot state should be true, but was false\n\n..\\..\\Steps\\schedule_action_steps.py:422: AssertionError"}, "description": "schedule.feature: Create 2 schedules of two consecutive periods,schedule1 end with \"previous mode\"and schedule2 no \"END\"", "attachments": [{"name": "log", "source": "4de35567-c032-485c-86c8-a6780c04a08b-attachment.txt", "type": "text/plain"}], "start": 1614113989430, "stop": 1614114620192, "uuid": "28c79e26-c799-4b1f-b81d-26755957adca", "historyId": "db05fdaf36070f8e159ccede8a5afe5b", "testCaseId": "2df358be782d280968a3bf5d23f546c9", "fullName": "Test_Suites.Tests.daily_regression_test.test_07_schedule_by_mqtt#test_29_create_two_schedules_of_two_consecutive_periods_schedule1_end_with_previous_mode_schedule2_no_end", "labels": [{"name": "story", "value": "Create 2 schedules of two consecutive periods,schedule1 end with \"previous mode\"and schedule2 no \"END\""}, {"name": "feature", "value": "Create schedule by mqtt"}, {"name": "tag", "value": "module"}, {"name": "tag", "value": "product"}, {"name": "tag", "value": "usefixtures"}, {"name": "parentSuite", "value": "Test_Suites.Tests.daily_regression_test"}, {"name": "suite", "value": "test_07_schedule_by_mqtt"}, {"name": "host", "value": "WIZ-LENOVOPT-SH0012"}, {"name": "thread", "value": "24620-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Suites.Tests.daily_regression_test.test_07_schedule_by_mqtt"}]}