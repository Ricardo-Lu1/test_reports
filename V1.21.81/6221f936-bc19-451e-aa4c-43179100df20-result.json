{"name": "test_13_create_schedule_with_daylight_end_with_previous_mode_when_lamp_status_on", "status": "failed", "statusDetails": {"message": "AssertionError: Error : create schedule for light_1 fail! UDP SyncPilot SceneId should be 11, but was 12", "trace": "request = <FixtureRequest for <Function test_13_create_schedule_with_daylight_end_with_previous_mode_when_lamp_status_on>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nc:\\users\\ricardo.lu\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\pytest_bdd\\scenario.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nc:\\users\\ricardo.lu\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\pytest_bdd\\scenario.py:189: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nc:\\users\\ricardo.lu\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\pytest_bdd\\scenario.py:130: in _execute_step_function\n    step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x00000171EFB90A88>\nlight_name = 'light_1', light_scene = 'Warm white'\n\n    @then(parsers.parse('check schedule for {light_name} status is ON with {light_scene} mode by udp syncPilot'))\n    def check_schedule_on_light_mode_by_udp_syncPilot(target, light_name, light_scene):\n        udp_sync_res = target.udp.get_udp_sync_pilot(light_name, \"schd\")\n        logger.info(\"udp syncPilot:\" + str(udp_sync_res))\n    \n        expect_light_scene_id = int(translator_scene_id(light_scene))\n    \n        # check by udp syncPilot\n        res_light_scene_id_udp_sync = udp_sync_res[\"params\"][\"sceneId\"]\n        if udp_sync_res[\"params\"][\"state\"] is False:\n            logger.info(\"Error : syncPilot state should be true, but was false\")\n            assert False, \"syncPilot state should be true, but was false\"\n    \n        if res_light_scene_id_udp_sync != expect_light_scene_id:\n            logger.info(\"Error : create schedule for \" + light_name + \" fail! UDP SyncPilot SceneId should be \" +\n                        str(expect_light_scene_id) + \", but was \" + str(res_light_scene_id_udp_sync))\n            assert False, \"Error : create schedule for \" + light_name + \" fail! UDP SyncPilot SceneId should be \" + \\\n>                         str(expect_light_scene_id) + \", but was \" + str(res_light_scene_id_udp_sync)\nE           AssertionError: Error : create schedule for light_1 fail! UDP SyncPilot SceneId should be 11, but was 12\n\n..\\..\\Steps\\schedule_action_steps.py:586: AssertionError"}, "description": "schedule.feature: Create a schedule with action \"Daylight\" and end with \"Previous mode\" when lamp original status is on", "attachments": [{"name": "log", "source": "3e257469-d8fa-474b-8eba-7ea3cd19b2fe-attachment.txt", "type": "text/plain"}], "start": 1614080281919, "stop": 1614080906561, "uuid": "ea98aea2-d464-4087-8cbe-60c56a0c41d7", "historyId": "2fe8c6012bf1a7ee09b87adf7463898d", "testCaseId": "bc2e374cf54908b5955c313509170991", "fullName": "Test_Suites.Tests.daily_regression_test.test_07_schedule_by_mqtt#test_13_create_schedule_with_daylight_end_with_previous_mode_when_lamp_status_on", "labels": [{"name": "feature", "value": "Create schedule by mqtt"}, {"name": "story", "value": "Create a schedule with action \"Daylight\" and end with \"Previous mode\" when lamp original status is on"}, {"name": "tag", "value": "module"}, {"name": "tag", "value": "product"}, {"name": "tag", "value": "usefixtures"}, {"name": "parentSuite", "value": "Test_Suites.Tests.daily_regression_test"}, {"name": "suite", "value": "test_07_schedule_by_mqtt"}, {"name": "host", "value": "WIZ-LENOVOPT-SH0012"}, {"name": "thread", "value": "24620-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Suites.Tests.daily_regression_test.test_07_schedule_by_mqtt"}]}