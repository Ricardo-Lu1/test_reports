{"name": "test_rtp_pair_device_only_wifi", "status": "failed", "statusDetails": {"message": "AssertionError: smart config pairing light fail, no light is found", "trace": "request = <FixtureRequest for <Function test_rtp_pair_device_only_wifi>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nc:\\users\\ricardo.lu\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\pytest_bdd\\scenario.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nc:\\users\\ricardo.lu\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\pytest_bdd\\scenario.py:189: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nc:\\users\\ricardo.lu\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\pytest_bdd\\scenario.py:130: in _execute_step_function\n    step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x000001EA1F3AFF08>\n\n    @then('check smart config pairing result')\n    def check_smart_pairing_result(target):\n        \"\"\"\n        - Narrative:\n            check smart config pairing result\n        \"\"\"\n        i = 1\n        paired_light_info = []\n        logger.info(\"check smart config pairing result\")\n        # get lights from config file\n        lamps = target.config_para['lamps'].copy()\n        e = target.ui.home_page.get_light_icon(i)\n        time.sleep(5)\n        # check if ota icon exists\n        logger.info(\"check if ota icon exits\")\n        for ota_index in range(60):\n            if target.ui.ui_common.is_element_exist_location('id', target.ui.home_page.OTA_ICON):\n                time.sleep(10)\n                # logger.info(\"#####################################################################################\")\n                # logger.info(\"ota index : \" + str(ota_index))\n                # logger.info(\"#####################################################################################\")\n            else:\n                break\n            if target.ui.ui_common.is_element_exist_location('id', target.ui.home_page.OTA_ERROR_ICON):\n                logger.info(\"====================================================================================\")\n                logger.info(\"ERROR : OTA fail after pairing!\")\n                logger.info(\"====================================================================================\")\n                target.ui.ui_common.screen_shot()\n                assert False, \"OTA fail!\"\n    \n        # check if light icon exist\n        if target.ui.ui_common.is_element_exist_location('xpath+id', e):\n            while target.ui.ui_common.is_element_exist_location('xpath+id', e):\n                # go to light settings page to get light info\n                target.ui.home_page.click_light_icon(i)\n                time.sleep(2)\n                target.ui.home_page.click_light_settings()\n    \n                if target.ui.ui_common.is_element_exist_location('id', target.ui.light_settings_page.UPGRADING_MESSAGE):\n                    # lamp setting page screen shot\n                    target.ui.ui_common.screen_shot()\n                    # go back to home page\n                    target.ui.light_settings_page.go_back_to_home()\n                    time.sleep(2)\n                    # home page screen shot\n                    target.ui.ui_common.screen_shot()\n                    logger.info(\"====================================================================================\")\n                    logger.info(\"ERROR : UI error, lamp is upgrading, but there is no pbOTA icon in home page!\")\n                    logger.info(\"====================================================================================\")\n                    target.ui.ui_common.screen_shot()\n                    assert False, \"UI error, lamp is upgrading, but there is no pbOTA icon in home page\"\n                # click light model and get light info\n                target.ui.light_settings_page.click_light_model()\n                light_info = target.ui.light_info_page.get_light_info()\n                time.sleep(2)\n    \n                bl_delete_lamp = True\n                # add config lamp info\n                for lamp_name in list(lamps):\n                    if lamps[lamp_name][0] == light_info['MacAddr']:\n                        # go back to light setting page\n                        target.ui.light_info_page.go_back_from_model()\n    \n                        # change light_name\n                        target.ui.light_settings_page.change_light_name(lamp_name)\n                        logger.info(\"change light name to \" + lamp_name)\n                        time.sleep(2)\n                        light_info['LampName'] = lamp_name\n                        paired_light_info.append(light_info)\n    \n                        # go back to home page\n                        target.ui.light_settings_page.go_back_to_home()\n    \n                        # update icon index\n                        i += 1\n                        e = target.ui.home_page.get_light_icon(i)\n                        logger.info(lamp_name + \" : \" + str(e))\n                        bl_delete_lamp = False\n                        lamps.pop(lamp_name)\n                if bl_delete_lamp:\n                    # go back to lamp setting page\n                    target.ui.light_info_page.go_back_from_model()\n                    time.sleep(2)\n                    # delete lamp\n                    target.ui.light_settings_page.click_delete_light()\n                    target.ui.light_settings_page.ok_delete_light()\n                    # do not update icon index\n                    e = target.ui.home_page.get_light_icon(i)\n                    logger.info(\"delete lamp\" + e)\n    \n            logger.info(str(i - 1) + \" light icon showed in App scream!\")\n            logger.info(paired_light_info)\n    \n            if len(lamps) != 0:\n                logger.info(\"====================================================================================\")\n                logger.info(\"ERROR : Smart config pairing light fail : \" + str(lamps))\n                logger.info(\"====================================================================================\")\n                target.ui.ui_common.screen_shot()\n                assert False, \"smart config pairing light fail : \" + str(lamps)\n        else:\n            logger.info(\"====================================================================================\")\n            logger.info(\"ERROR : No light showed in App scream! No light is found!\")\n            logger.info(\"====================================================================================\")\n            target.ui.ui_common.screen_shot()\n>           assert False, \"smart config pairing light fail, no light is found\"\nE           AssertionError: smart config pairing light fail, no light is found\n\n..\\..\\Steps\\pair_lamps_steps.py:872: AssertionError"}, "description": "01_pairing.feature: RTP pairing by only wifi", "attachments": [{"name": "log", "source": "6211b6f8-39c0-40c3-8964-74d65f243b32-attachment.txt", "type": "text/plain"}], "start": 1614135418967, "stop": 1614135716310, "uuid": "0fe47bef-4c36-4086-9484-632f79c336d6", "historyId": "4d1b97c9fe656aed4d7ef988359a1bc1", "testCaseId": "e7e21f5454391169402ba012f2af76b0", "fullName": "Test_Suites.Tests.daily_regression_test.test_02_pairing#test_rtp_pair_device_only_wifi", "labels": [{"name": "feature", "value": "Pairing"}, {"name": "story", "value": "Pairing by only wifi"}, {"name": "tag", "value": "module"}, {"name": "tag", "value": "usefixtures"}, {"name": "tag", "value": "product"}, {"name": "parentSuite", "value": "Test_Suites.Tests.daily_regression_test"}, {"name": "suite", "value": "test_02_pairing"}, {"name": "host", "value": "WIZ-LENOVOPT-SH0012"}, {"name": "thread", "value": "25216-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Suites.Tests.daily_regression_test.test_02_pairing"}]}