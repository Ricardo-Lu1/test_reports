{
  "uid" : "f2ff993f18260abc",
  "name" : "test_16_create_schedule_with_bedtime_end_with_previous_mode_after_30min_when_lamp_status_warm_white",
  "fullName" : "Test_Suites.Tests.test_function_without_app.test_schedule_by_mqtt#test_16_create_schedule_with_bedtime_end_with_previous_mode_after_30min_when_lamp_status_warm_white",
  "historyId" : "36b7e40f39aa5796f8e1d9679d71d5bb",
  "time" : {
    "start" : 1596021965762,
    "stop" : 1596024360070,
    "duration" : 2394308
  },
  "description" : "schedule_actions.feature: Create a schedule with action \"Bedtime\" and end with \"Previous mode\" after 30min when lamp original status is \"Warm White\"",
  "descriptionHtml" : "<p>schedule_actions.feature: Create a schedule with action &quot;Bedtime&quot; and end with &quot;Previous mode&quot; after 30min when lamp original status is &quot;Warm White&quot;</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: Error : create schedule for light_1 fail! SceneId should be 11, but was 10",
  "statusTrace" : "request = <FixtureRequest for <Function test_16_create_schedule_with_bedtime_end_with_previous_mode_after_30min_when_lamp_status_warm_white>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:189: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:130: in _execute_step_function\n    step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x000001E7D1DE4F88>\nlight_name = 'light_1', light_scene = 'Warm white'\nstart_time = datetime.datetime(2020, 7, 29, 20, 5)\n\n    @then(parsers.parse('check schedule for {light_name} with {light_scene} mode at {start_time}'))\n    def check_schedule_by_mqtt(target, light_name, light_scene, start_time):\n        now_time = datetime.datetime.now()\n        now_date = datetime.datetime.now().strftime('%Y-%m-%d')\n        start_time = now_date + ' ' + start_time\n        start_time = datetime.datetime.strptime(start_time, '%Y-%m-%d %H:%M')\n        logger.info(\"now time is \" + str(now_time))\n        logger.info(light_name + \" schedule will be active at \" + str(start_time))\n        wait_seconds = (start_time - now_time).seconds + 60\n        wait_minutes = wait_seconds / 60\n        logger.info(\"wait \" + format(wait_minutes, '.3f') + \" minutes util schedule takes effect\")\n        time.sleep(wait_seconds)\n        response = target.udp.get_pilot_phone(light_name)\n        res_light_scene_id = response[\"result\"][\"sceneId\"]\n        expect_light_scene_id = int(translator_scene_id(light_scene))\n        if res_light_scene_id != expect_light_scene_id:\n            logger.info(\"Error : create schedule for \" + light_name + \" fail! SceneId should be \" +\n                        str(expect_light_scene_id) + \", but was \" + str(res_light_scene_id))\n            assert False, \"Error : create schedule for \" + light_name + \" fail! SceneId should be \" + \\\n>                         str(expect_light_scene_id) + \", but was \" + str(res_light_scene_id)\nE           AssertionError: Error : create schedule for light_1 fail! SceneId should be 11, but was 10\n\n..\\..\\Steps\\schedule_action_steps.py:286: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_Module__pytest_setup_module",
    "time" : {
      "start" : 1596015768881,
      "stop" : 1596015768881,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "schedule_actions.feature: Create a schedule with action \"Bedtime\" and end with \"Previous mode\" after 30min when lamp original status is \"Warm White\"",
    "status" : "failed",
    "statusMessage" : "AssertionError: Error : create schedule for light_1 fail! SceneId should be 11, but was 10",
    "statusTrace" : "request = <FixtureRequest for <Function test_16_create_schedule_with_bedtime_end_with_previous_mode_after_30min_when_lamp_status_warm_white>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:189: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:130: in _execute_step_function\n    step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x000001E7D1DE4F88>\nlight_name = 'light_1', light_scene = 'Warm white'\nstart_time = datetime.datetime(2020, 7, 29, 20, 5)\n\n    @then(parsers.parse('check schedule for {light_name} with {light_scene} mode at {start_time}'))\n    def check_schedule_by_mqtt(target, light_name, light_scene, start_time):\n        now_time = datetime.datetime.now()\n        now_date = datetime.datetime.now().strftime('%Y-%m-%d')\n        start_time = now_date + ' ' + start_time\n        start_time = datetime.datetime.strptime(start_time, '%Y-%m-%d %H:%M')\n        logger.info(\"now time is \" + str(now_time))\n        logger.info(light_name + \" schedule will be active at \" + str(start_time))\n        wait_seconds = (start_time - now_time).seconds + 60\n        wait_minutes = wait_seconds / 60\n        logger.info(\"wait \" + format(wait_minutes, '.3f') + \" minutes util schedule takes effect\")\n        time.sleep(wait_seconds)\n        response = target.udp.get_pilot_phone(light_name)\n        res_light_scene_id = response[\"result\"][\"sceneId\"]\n        expect_light_scene_id = int(translator_scene_id(light_scene))\n        if res_light_scene_id != expect_light_scene_id:\n            logger.info(\"Error : create schedule for \" + light_name + \" fail! SceneId should be \" +\n                        str(expect_light_scene_id) + \", but was \" + str(res_light_scene_id))\n            assert False, \"Error : create schedule for \" + light_name + \" fail! SceneId should be \" + \\\n>                         str(expect_light_scene_id) + \", but was \" + str(res_light_scene_id)\nE           AssertionError: Error : create schedule for light_1 fail! SceneId should be 11, but was 10\n\n..\\..\\Steps\\schedule_action_steps.py:286: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "370ba8b5f2688c8b",
      "name" : "log",
      "source" : "370ba8b5f2688c8b.txt",
      "type" : "text/plain",
      "size" : 9823
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "_Module__pytest_setup_module::0",
    "time" : {
      "start" : 1596056467602,
      "stop" : 1596056482565,
      "duration" : 14963
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Create a schedule with action \"Bedtime\" and end with \"Previous mode\" after 30min when lamp original status is \"Warm White\""
  }, {
    "name" : "feature",
    "value" : "Create schedule by mqtt"
  }, {
    "name" : "tag",
    "value" : "usefixtures"
  }, {
    "name" : "parentSuite",
    "value" : "Test_Suites.Tests.test_function_without_app"
  }, {
    "name" : "suite",
    "value" : "test_schedule_by_mqtt"
  }, {
    "name" : "host",
    "value" : "WIZ-LENOVOPT-SH0012"
  }, {
    "name" : "thread",
    "value" : "21380-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "Test_Suites.Tests.test_function_without_app.test_schedule_by_mqtt"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "usefixtures" ]
  },
  "source" : "f2ff993f18260abc.json",
  "parameterValues" : [ ]
}