{"name": "test_28_create_two_schedules_of_two_intersecting_time_periods", "status": "failed", "statusDetails": {"message": "AssertionError: UDP state should be false, but was true", "trace": "request = <FixtureRequest for <Function test_28_create_two_schedules_of_two_intersecting_time_periods>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:189: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:130: in _execute_step_function\n    step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x000001E7D1DE4F88>\nlight_name = 'light_1', action = 'OFF'\ncheck_time = datetime.datetime(2020, 7, 30, 2, 50)\n\n    @then(parsers.parse('check {light_name} status is {action} at {check_time}'))\n    def check_light_status(target, light_name, action, check_time):\n        now_time = datetime.datetime.now()\n        now_date = datetime.datetime.now().strftime('%Y-%m-%d')\n        check_time = now_date + ' ' + check_time\n        check_time = datetime.datetime.strptime(check_time, '%Y-%m-%d %H:%M')\n        logger.info(\"now time is \" + str(now_time))\n        logger.info(light_name + \" schedule will be active at \" + str(check_time))\n        wait_seconds = (check_time - now_time).seconds + 60\n        wait_minutes = wait_seconds / 60\n        logger.info(\"wait \" + format(wait_minutes, '.3f') + \" minutes util schedule takes effect\")\n        time.sleep(wait_seconds)\n    \n        # check the status from light\n        logger.info(\"check light status\")\n        response = target.udp.get_pilot_phone(light_name)\n        logger.info(response)\n    \n        if action == 'ON':\n            if response[\"result\"][\"state\"] is not True:\n                logger.info(\"Error : UDP state should be true, but was false\")\n                assert False, \"UDP state should be true, but was false\"\n        elif action == 'OFF':\n            if response[\"result\"][\"state\"] is not False:\n                logger.info(\"Error : UDP state should be false, but was true\")\n>               assert False, \"UDP state should be false, but was true\"\nE               AssertionError: UDP state should be false, but was true\n\n..\\..\\Steps\\schedule_action_steps.py:221: AssertionError"}, "description": "schedule_actions.feature: Create 2 schedules of two intersecting time periods", "attachments": [{"name": "log", "source": "b964a19e-dd19-4dfc-b943-52887ea57550-attachment.txt", "type": "text/plain"}], "start": 1596047760570, "stop": 1596048660113, "uuid": "9ebb7d35-bab0-4688-bc43-b1a84015f473", "historyId": "ddf36ef7af80183be453ee8027fb75b2", "testCaseId": "28e07b247347918dabd7eb4951d663d4", "fullName": "Test_Suites.Tests.test_function_without_app.test_schedule_by_mqtt#test_28_create_two_schedules_of_two_intersecting_time_periods", "labels": [{"name": "feature", "value": "Create schedule by mqtt"}, {"name": "story", "value": "Create 2 schedules of two intersecting time periods"}, {"name": "tag", "value": "usefixtures"}, {"name": "parentSuite", "value": "Test_Suites.Tests.test_function_without_app"}, {"name": "suite", "value": "test_schedule_by_mqtt"}, {"name": "host", "value": "WIZ-LENOVOPT-SH0012"}, {"name": "thread", "value": "21380-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Suites.Tests.test_function_without_app.test_schedule_by_mqtt"}]}