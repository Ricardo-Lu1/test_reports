{"name": "test_14_create_schedule_with_warm_white_end_with_previous_mode_when_lamp_status_bedtime", "status": "failed", "statusDetails": {"message": "AssertionError: Error : Get MQTT syncPilot timeout!", "trace": "request = <FixtureRequest for <Function test_14_create_schedule_with_warm_white_end_with_previous_mode_when_lamp_status_bedtime>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:189: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:130: in _execute_step_function\n    step_func(**kwargs)\n..\\..\\Steps\\schedule_action_steps.py:413: in check_schedule\n    mqtt_res = target.mqtt.get_res_mqtt_sync_pilot(light_name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Wrapper.wrapper_mqtt.WrapperMQTT object at 0x0000026E759DF608>\nlight_name = 'light_1'\n\n    def get_res_mqtt_sync_pilot(self, light_name):\n        topic = self.cloud_mqtt_cmd.create_topic_from_light(light_name)\n        start_time = datetime.datetime.now()\n        while True:\n            for mqtt_client in self.list_mqtt_client:\n                rcv_topic, rcv_msg = mqtt_client.get_subscribe_topic_message()\n                if topic == rcv_topic:\n                    if rcv_msg[\"method\"] == \"syncPilot\":\n                        print(\"MQTT:\" + str(rcv_msg))\n                        mqtt_client.clear_subscribe_topic_message()\n                        return rcv_msg\n            if (datetime.datetime.now() - start_time).seconds > 10:\n>               assert False, \"Error : Get MQTT syncPilot timeout!\"\nE               AssertionError: Error : Get MQTT syncPilot timeout!\n\n..\\..\\..\\Wrapper\\wrapper_mqtt.py:403: AssertionError"}, "description": "schedule.feature: Create a schedule with action \"Warm White\" and end with \"Previous mode\" when lamp original status is \"Bedtime\"", "attachments": [{"name": "log", "source": "35ab65db-a53c-4308-8620-d8ac503b4a51-attachment.txt", "type": "text/plain"}], "start": 1608629734499, "stop": 1608630394593, "uuid": "bf75c5bc-2fa8-4fb8-b959-b41c227eb691", "historyId": "f4d4049f1dda37d51fd7983644251770", "testCaseId": "04475db91246d587baa15598d3a1a38a", "fullName": "Test_Suites.Tests.test_regression_product.test_07_schedule_by_mqtt#test_14_create_schedule_with_warm_white_end_with_previous_mode_when_lamp_status_bedtime", "labels": [{"name": "story", "value": "Create a schedule with action \"Warm White\" and end with \"Previous mode\" when lamp original status is \"Bedtime\""}, {"name": "feature", "value": "Create schedule by mqtt"}, {"name": "tag", "value": "usefixtures"}, {"name": "parentSuite", "value": "Test_Suites.Tests.test_regression_product"}, {"name": "suite", "value": "test_07_schedule_by_mqtt"}, {"name": "host", "value": "WIZ-LENOVOPT-SH0012"}, {"name": "thread", "value": "14944-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Suites.Tests.test_regression_product.test_07_schedule_by_mqtt"}]}