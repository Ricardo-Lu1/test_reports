{
  "uid" : "1d5b0b2f97ba16cf",
  "name" : "test_16_save_scene_when_rhythm_playing_by_mqtt",
  "fullName" : "Test_Suites.Tests.test_regression_product.test_08_rhythm_by_mqtt#test_16_save_scene_when_rhythm_playing_by_mqtt",
  "historyId" : "f262c9eb1f89f3b2381e2b28805545ab",
  "time" : {
    "start" : 1608572822478,
    "stop" : 1608572843383,
    "duration" : 20905
  },
  "description" : "rhythm.feature: Save scene when rhythm playing",
  "descriptionHtml" : "<p>rhythm.feature: Save scene when rhythm playing</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: Error : Get UDP syncPilot timeout!",
  "statusTrace" : "request = <FixtureRequest for <Function test_16_save_scene_when_rhythm_playing_by_mqtt>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:189: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:130: in _execute_step_function\n    step_func(**kwargs)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\steps.py:162: in step_func\n    result = request.getfixturevalue(func.__name__)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:482: in getfixturevalue\n    return self._get_active_fixturedef(argname).cached_result[0]\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:498: in _get_active_fixturedef\n    self._compute_fixture_value(fixturedef)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:579: in _compute_fixture_value\n    fixturedef.execute(request=subrequest)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:908: in execute\n    return hook.pytest_fixture_setup(fixturedef=self, request=request)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pluggy\\manager.py:87: in <lambda>\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:957: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:787: in call_fixture_func\n    res = fixturefunc(**kwargs)\n..\\..\\Steps\\control_lamp_steps.py:830: in check_light_mode\n    udp_sync_res = target.udp.get_udp_sync_pilot(light_name, act_type)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Wrapper.wrapper_udp.WrapperUDP object at 0x00000160617A1C88>\nlight_name = 'light_1', src_type = 'udp'\n\n    def get_udp_sync_pilot(self, light_name, src_type):\n        light_mac = get_mac_from_name(light_name)\n        start_time = datetime.datetime.now()\n        while True:\n            end_time = datetime.datetime.now()\n            if not self.bl_get_sync:\n                response = self.udp_listen.server_receive_message()\n                if response is not False:\n                    response = json.loads(response)\n                    if response[\"method\"] == \"syncPilot\":\n                        payload = response[\"params\"]\n                        if payload[\"mac\"] == light_mac and payload[\"src\"] == src_type:\n                            # self.bl_register = False\n                            print(\"UDP:\" + str(response))\n                            return response\n                if (end_time - start_time).seconds > 10:\n>                   assert False, \"Error : Get UDP syncPilot timeout!\"\nE                   AssertionError: Error : Get UDP syncPilot timeout!\n\n..\\..\\..\\Wrapper\\wrapper_udp.py:378: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "target",
    "time" : {
      "start" : 1608572723719,
      "stop" : 1608572723719,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "description" : "rhythm.feature: Save scene when rhythm playing",
    "status" : "failed",
    "statusMessage" : "AssertionError: Error : Get UDP syncPilot timeout!",
    "statusTrace" : "request = <FixtureRequest for <Function test_16_save_scene_when_rhythm_playing_by_mqtt>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:189: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:130: in _execute_step_function\n    step_func(**kwargs)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\steps.py:162: in step_func\n    result = request.getfixturevalue(func.__name__)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:482: in getfixturevalue\n    return self._get_active_fixturedef(argname).cached_result[0]\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:498: in _get_active_fixturedef\n    self._compute_fixture_value(fixturedef)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:579: in _compute_fixture_value\n    fixturedef.execute(request=subrequest)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:908: in execute\n    return hook.pytest_fixture_setup(fixturedef=self, request=request)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pluggy\\manager.py:87: in <lambda>\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:957: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:787: in call_fixture_func\n    res = fixturefunc(**kwargs)\n..\\..\\Steps\\control_lamp_steps.py:830: in check_light_mode\n    udp_sync_res = target.udp.get_udp_sync_pilot(light_name, act_type)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Wrapper.wrapper_udp.WrapperUDP object at 0x00000160617A1C88>\nlight_name = 'light_1', src_type = 'udp'\n\n    def get_udp_sync_pilot(self, light_name, src_type):\n        light_mac = get_mac_from_name(light_name)\n        start_time = datetime.datetime.now()\n        while True:\n            end_time = datetime.datetime.now()\n            if not self.bl_get_sync:\n                response = self.udp_listen.server_receive_message()\n                if response is not False:\n                    response = json.loads(response)\n                    if response[\"method\"] == \"syncPilot\":\n                        payload = response[\"params\"]\n                        if payload[\"mac\"] == light_mac and payload[\"src\"] == src_type:\n                            # self.bl_register = False\n                            print(\"UDP:\" + str(response))\n                            return response\n                if (end_time - start_time).seconds > 10:\n>                   assert False, \"Error : Get UDP syncPilot timeout!\"\nE                   AssertionError: Error : Get UDP syncPilot timeout!\n\n..\\..\\..\\Wrapper\\wrapper_udp.py:378: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "37d3585c6d8900b4",
      "name" : "log",
      "source" : "37d3585c6d8900b4.txt",
      "type" : "text/plain",
      "size" : 1697
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Test cases for rhythm"
  }, {
    "name" : "story",
    "value" : "Save scene when rhythm playing"
  }, {
    "name" : "tag",
    "value" : "usefixtures"
  }, {
    "name" : "parentSuite",
    "value" : "Test_Suites.Tests.test_regression_product"
  }, {
    "name" : "suite",
    "value" : "test_08_rhythm_by_mqtt"
  }, {
    "name" : "host",
    "value" : "WIZ-LENOVOPT-SH0012"
  }, {
    "name" : "thread",
    "value" : "8716-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "Test_Suites.Tests.test_regression_product.test_08_rhythm_by_mqtt"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "usefixtures" ]
  },
  "source" : "1d5b0b2f97ba16cf.json",
  "parameterValues" : [ ]
}