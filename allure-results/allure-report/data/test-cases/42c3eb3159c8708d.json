{
  "uid" : "42c3eb3159c8708d",
  "name" : "test_23_create_schedule_with_wake_up_end_with_previous_mode_after_30min_when_lamp_status_night_light",
  "fullName" : "Test_Suites.Tests.test_regression_product.test_07_schedule_by_mqtt#test_23_create_schedule_with_wake_up_end_with_previous_mode_after_30min_when_lamp_status_night_light",
  "historyId" : "2fb055f9ca0c9fc871d8a628f66a643b",
  "time" : {
    "start" : 1608559326853,
    "stop" : 1608559657784,
    "duration" : 330931
  },
  "description" : "schedule.feature: Create a schedule with action \"Wake-up\" and end with \"Previous mode\" after 30min when lamp original status is \"Night Light\"",
  "descriptionHtml" : "<p>schedule.feature: Create a schedule with action &quot;Wake-up&quot; and end with &quot;Previous mode&quot; after 30min when lamp original status is &quot;Night Light&quot;</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: Error : create schedule for light_1 fail! UDP syncPilot SceneId should be 9, but was 14",
  "statusTrace" : "request = <FixtureRequest for <Function test_23_create_schedule_with_wake_up_end_with_previous_mode_after_30min_when_lamp_status_night_light>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:189: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:130: in _execute_step_function\n    step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x00000160617A1A88>\nlight_name = 'light_1', light_scene = 'Wake-up'\n\n    @then(parsers.parse('check schedule for {light_name} with {light_scene} mode'))\n    def check_schedule(target, light_name, light_scene):\n        udp_sync_res = target.udp.get_udp_sync_pilot(light_name, \"schd\")\n        logger.info(\"udp syncPilot:\" + str(udp_sync_res))\n    \n        mqtt_res = target.mqtt.get_res_mqtt_sync_pilot(light_name)\n        response = target.udp.get_pilot_phone(light_name)\n        logger.info(\"udp response:\" + str(response))\n    \n        expect_light_scene_id = int(translator_scene_id(light_scene))\n    \n        # check by udp\n        res_light_scene_id_udp = response[\"result\"][\"sceneId\"]\n        if response[\"result\"][\"state\"] is False:\n            logger.info(\"Error : UDP state should be true, but was false\")\n            assert False, \"UDP state should be true, but was false\"\n        if res_light_scene_id_udp != expect_light_scene_id:\n            logger.info(\"Error : create schedule for \" + light_name + \" fail! UDP SceneId should be \" +\n                        str(expect_light_scene_id) + \", but was \" + str(res_light_scene_id_udp))\n            assert False, \"Error : create schedule for \" + light_name + \" fail! UDP SceneId should be \" + \\\n                          str(expect_light_scene_id) + \", but was \" + str(res_light_scene_id_udp)\n    \n        # check by mqtt syncPilot\n        if mqtt_res is None:\n            logger.info(\"Error : MQTT did not get syncPilot from device!\")\n            assert False, \"Error : MQTT did not get syncPilot from device!\"\n        else:\n            logger.info(\"mqtt syncPilot:\" + str(mqtt_res))\n    \n        res_light_scene_id_mqtt = mqtt_res[\"params\"][\"sceneId\"]\n        if mqtt_res[\"params\"][\"state\"] is False:\n            logger.info(\"Error : MQTT syncPilot state should be true, but was false\")\n            assert False, \"MQTT syncPilot state should be true, but was false\"\n        if res_light_scene_id_mqtt != expect_light_scene_id:\n            logger.info(\"Error : create schedule for \" + light_name + \" fail! MQTT syncPilot SceneId should be \" +\n                        str(expect_light_scene_id) + \", but was \" + str(res_light_scene_id_mqtt))\n            assert False, \"Error : create schedule for \" + light_name + \" fail! MQTT syncPilot SceneId should be \" + \\\n                          str(expect_light_scene_id) + \", but was \" + str(res_light_scene_id_mqtt)\n    \n        # check by udp syncPilot\n        res_light_scene_id_udp_sync = udp_sync_res[\"params\"][\"sceneId\"]\n        if udp_sync_res[\"params\"][\"state\"] is False:\n            logger.info(\"Error : UDP syncPilot state should be true, but was false\")\n            assert False, \"UDP syncPilot state should be true, but was false\"\n        if res_light_scene_id_udp_sync != expect_light_scene_id:\n            logger.info(\"Error : create schedule for \" + light_name + \" fail! UDP syncPilot SceneId should be \" +\n                        str(expect_light_scene_id) + \", but was \" + str(res_light_scene_id_udp_sync))\n            assert False, \"Error : create schedule for \" + light_name + \" fail! UDP syncPilot SceneId should be \" + \\\n>                         str(expect_light_scene_id) + \", but was \" + str(res_light_scene_id_udp_sync)\nE           AssertionError: Error : create schedule for light_1 fail! UDP syncPilot SceneId should be 9, but was 14\n\n..\\..\\Steps\\schedule_action_steps.py:456: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "target",
    "time" : {
      "start" : 1608542877301,
      "stop" : 1608542877302,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "description" : "schedule.feature: Create a schedule with action \"Wake-up\" and end with \"Previous mode\" after 30min when lamp original status is \"Night Light\"",
    "status" : "failed",
    "statusMessage" : "AssertionError: Error : create schedule for light_1 fail! UDP syncPilot SceneId should be 9, but was 14",
    "statusTrace" : "request = <FixtureRequest for <Function test_23_create_schedule_with_wake_up_end_with_previous_mode_after_30min_when_lamp_status_night_light>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:189: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:130: in _execute_step_function\n    step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x00000160617A1A88>\nlight_name = 'light_1', light_scene = 'Wake-up'\n\n    @then(parsers.parse('check schedule for {light_name} with {light_scene} mode'))\n    def check_schedule(target, light_name, light_scene):\n        udp_sync_res = target.udp.get_udp_sync_pilot(light_name, \"schd\")\n        logger.info(\"udp syncPilot:\" + str(udp_sync_res))\n    \n        mqtt_res = target.mqtt.get_res_mqtt_sync_pilot(light_name)\n        response = target.udp.get_pilot_phone(light_name)\n        logger.info(\"udp response:\" + str(response))\n    \n        expect_light_scene_id = int(translator_scene_id(light_scene))\n    \n        # check by udp\n        res_light_scene_id_udp = response[\"result\"][\"sceneId\"]\n        if response[\"result\"][\"state\"] is False:\n            logger.info(\"Error : UDP state should be true, but was false\")\n            assert False, \"UDP state should be true, but was false\"\n        if res_light_scene_id_udp != expect_light_scene_id:\n            logger.info(\"Error : create schedule for \" + light_name + \" fail! UDP SceneId should be \" +\n                        str(expect_light_scene_id) + \", but was \" + str(res_light_scene_id_udp))\n            assert False, \"Error : create schedule for \" + light_name + \" fail! UDP SceneId should be \" + \\\n                          str(expect_light_scene_id) + \", but was \" + str(res_light_scene_id_udp)\n    \n        # check by mqtt syncPilot\n        if mqtt_res is None:\n            logger.info(\"Error : MQTT did not get syncPilot from device!\")\n            assert False, \"Error : MQTT did not get syncPilot from device!\"\n        else:\n            logger.info(\"mqtt syncPilot:\" + str(mqtt_res))\n    \n        res_light_scene_id_mqtt = mqtt_res[\"params\"][\"sceneId\"]\n        if mqtt_res[\"params\"][\"state\"] is False:\n            logger.info(\"Error : MQTT syncPilot state should be true, but was false\")\n            assert False, \"MQTT syncPilot state should be true, but was false\"\n        if res_light_scene_id_mqtt != expect_light_scene_id:\n            logger.info(\"Error : create schedule for \" + light_name + \" fail! MQTT syncPilot SceneId should be \" +\n                        str(expect_light_scene_id) + \", but was \" + str(res_light_scene_id_mqtt))\n            assert False, \"Error : create schedule for \" + light_name + \" fail! MQTT syncPilot SceneId should be \" + \\\n                          str(expect_light_scene_id) + \", but was \" + str(res_light_scene_id_mqtt)\n    \n        # check by udp syncPilot\n        res_light_scene_id_udp_sync = udp_sync_res[\"params\"][\"sceneId\"]\n        if udp_sync_res[\"params\"][\"state\"] is False:\n            logger.info(\"Error : UDP syncPilot state should be true, but was false\")\n            assert False, \"UDP syncPilot state should be true, but was false\"\n        if res_light_scene_id_udp_sync != expect_light_scene_id:\n            logger.info(\"Error : create schedule for \" + light_name + \" fail! UDP syncPilot SceneId should be \" +\n                        str(expect_light_scene_id) + \", but was \" + str(res_light_scene_id_udp_sync))\n            assert False, \"Error : create schedule for \" + light_name + \" fail! UDP syncPilot SceneId should be \" + \\\n>                         str(expect_light_scene_id) + \", but was \" + str(res_light_scene_id_udp_sync)\nE           AssertionError: Error : create schedule for light_1 fail! UDP syncPilot SceneId should be 9, but was 14\n\n..\\..\\Steps\\schedule_action_steps.py:456: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "b48ef560378fcc94",
      "name" : "log",
      "source" : "b48ef560378fcc94.txt",
      "type" : "text/plain",
      "size" : 4200
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Create schedule by mqtt"
  }, {
    "name" : "story",
    "value" : "Create a schedule with action \"Wake-up\" and end with \"Previous mode\" after 30min when lamp original status is \"Night Light\""
  }, {
    "name" : "tag",
    "value" : "usefixtures"
  }, {
    "name" : "parentSuite",
    "value" : "Test_Suites.Tests.test_regression_product"
  }, {
    "name" : "suite",
    "value" : "test_07_schedule_by_mqtt"
  }, {
    "name" : "host",
    "value" : "WIZ-LENOVOPT-SH0012"
  }, {
    "name" : "thread",
    "value" : "8716-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "Test_Suites.Tests.test_regression_product.test_07_schedule_by_mqtt"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "usefixtures" ]
  },
  "source" : "42c3eb3159c8708d.json",
  "parameterValues" : [ ]
}