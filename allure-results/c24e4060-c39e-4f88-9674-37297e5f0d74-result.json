{"name": "test_20_create_schedule_with_wake_up_end_with_previous_mode_after_30min_when_lamp_status_off", "status": "failed", "statusDetails": {"message": "AssertionError: MQTT syncPilot state should be false, but was true", "trace": "request = <FixtureRequest for <Function test_20_create_schedule_with_wake_up_end_with_previous_mode_after_30min_when_lamp_status_off>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:189: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:130: in _execute_step_function\n    step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x00000160617A1A88>\nlight_name = 'light_1', action = 'OFF'\n\n    @then(parsers.parse('check {light_name} status is {action}'))\n    def check_light_status(target, light_name, action):\n        logger.info(\"check light status\")\n        udp_sync_res = target.udp.get_udp_sync_pilot(light_name, \"schd\")\n        logger.info(\"udp syncPilot:\" + str(udp_sync_res))\n        mqtt_res = target.mqtt.get_res_mqtt_sync_pilot(light_name)\n        if mqtt_res is None:\n            logger.info(\"Error : MQTT did not get syncPilot from device!\")\n            assert False, \"Error : MQTT did not get syncPilot from device!\"\n        else:\n            logger.info(\"mqtt syncPilot:\" + str(mqtt_res))\n        response = target.udp.get_pilot_phone(light_name)\n        logger.info(\"udp response:\" + str(response))\n    \n        if action == 'ON':\n            if mqtt_res[\"params\"][\"state\"] is False:\n                logger.info(\"Error : MQTT syncPilot state should be true, but was false\")\n                assert False, \"MQTT syncPilot state should be true, but was false\"\n            if udp_sync_res[\"params\"][\"state\"] is False:\n                logger.info(\"Error : UDP syncPilot state should be true, but was false\")\n                assert False, \"UDP syncPilot state should be true, but was false\"\n            if response[\"result\"][\"state\"] is False:\n                logger.info(\"Error : UDP state should be true, but was false\")\n                assert False, \"UDP state should be true, but was false\"\n        elif action == 'OFF':\n            if mqtt_res[\"params\"][\"state\"] is True:\n                logger.info(\"Error : MQTT syncPilot state should be false, but was true\")\n>               assert False, \"MQTT syncPilot state should be false, but was true\"\nE               AssertionError: MQTT syncPilot state should be false, but was true\n\n..\\..\\Steps\\schedule_action_steps.py:282: AssertionError"}, "description": "schedule.feature: Create a schedule with action \"Wake-up\" and end with \"Previous mode\" after 30min when lamp original status is \"OFF\"", "attachments": [{"name": "log", "source": "456ac12f-6787-4acd-9c98-57195415ea5c-attachment.txt", "type": "text/plain"}], "start": 1608555561749, "stop": 1608558030743, "uuid": "463a4912-40cc-48b5-a0c9-73fea4ccdb9a", "historyId": "72abc25604db4ea56ab75b619c635e7a", "testCaseId": "d678416a2222790346f2e5f990cdc2d3", "fullName": "Test_Suites.Tests.test_regression_product.test_07_schedule_by_mqtt#test_20_create_schedule_with_wake_up_end_with_previous_mode_after_30min_when_lamp_status_off", "labels": [{"name": "story", "value": "Create a schedule with action \"Wake-up\" and end with \"Previous mode\" after 30min when lamp original status is \"OFF\""}, {"name": "feature", "value": "Create schedule by mqtt"}, {"name": "tag", "value": "usefixtures"}, {"name": "parentSuite", "value": "Test_Suites.Tests.test_regression_product"}, {"name": "suite", "value": "test_07_schedule_by_mqtt"}, {"name": "host", "value": "WIZ-LENOVOPT-SH0012"}, {"name": "thread", "value": "8716-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Suites.Tests.test_regression_product.test_07_schedule_by_mqtt"}]}