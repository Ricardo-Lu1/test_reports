{"name": "test_tcp_comm_temperature", "status": "failed", "statusDetails": {"message": "AssertionError: Error : Get UDP syncPilot timeout!", "trace": "request = <FixtureRequest for <Function test_tcp_comm_temperature>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:189: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:130: in _execute_step_function\n    step_func(**kwargs)\n..\\..\\Steps\\control_lamp_steps.py:722: in check_light_temperature\n    udp_sync_res = target.udp.get_udp_sync_pilot(light_name, act_type)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Wrapper.wrapper_udp.WrapperUDP object at 0x0000019A4BE61E08>\nlight_name = 'light_1', src_type = 'wizappd'\n\n    def get_udp_sync_pilot(self, light_name, src_type):\n        light_mac = get_mac_from_name(light_name)\n        start_time = datetime.datetime.now()\n        while True:\n            end_time = datetime.datetime.now()\n            if not self.bl_get_sync:\n                response = self.udp_listen.server_receive_message()\n                if response is not False:\n                    try:\n                        response = json.loads(response)\n                    except:\n                        continue\n                    if response[\"method\"] == \"syncPilot\":\n                        payload = response[\"params\"]\n                        if payload[\"mac\"] == light_mac and payload[\"src\"] == src_type:\n                            # self.bl_register = False\n                            print(\"UDP:\" + str(response))\n                            return response\n                if (end_time - start_time).seconds > 10:\n>                   assert False, \"Error : Get UDP syncPilot timeout!\"\nE                   AssertionError: Error : Get UDP syncPilot timeout!\n\n..\\..\\..\\Wrapper\\wrapper_udp.py:384: AssertionError"}, "description": "tcp_comm.feature: Single device control by mqtt - Temperature", "attachments": [{"name": "log", "source": "4a15f120-57bc-4b9b-a30e-999a0b4ac597-attachment.txt", "type": "text/plain"}], "start": 1608715254130, "stop": 1608715277242, "uuid": "59e948e2-83a2-42be-901b-7221c28f2929", "historyId": "4062ab6af57d55239c3f883b95af97bf", "testCaseId": "240241d5e08a8d2b1f7bdad83415936c", "fullName": "Test_Suites.Tests.test_regression_product.test_06_tcp_communication#test_tcp_comm_temperature", "labels": [{"name": "story", "value": "Device control"}, {"name": "feature", "value": "TCP Communication"}, {"name": "tag", "value": "usefixtures"}, {"name": "parentSuite", "value": "Test_Suites.Tests.test_regression_product"}, {"name": "suite", "value": "test_06_tcp_communication"}, {"name": "host", "value": "WIZ-LENOVOPT-SH0012"}, {"name": "thread", "value": "14908-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Suites.Tests.test_regression_product.test_06_tcp_communication"}]}