{"name": "test_single_device_control_dimming", "status": "failed", "statusDetails": {"message": "AssertionError: Error : Get UDP syncPilot timeout!", "trace": "request = <FixtureRequest for <Function test_single_device_control_dimming>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:189: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:130: in _execute_step_function\n    step_func(**kwargs)\n..\\..\\Steps\\control_lamp_steps.py:669: in check_light_dimming_level\n    udp_sync_res = target.udp.get_udp_sync_pilot(light_name, act_type)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Wrapper.wrapper_udp.WrapperUDP object at 0x000001C78F533B08>\nlight_name = 'light_1', src_type = 'udp'\n\n    def get_udp_sync_pilot(self, light_name, src_type):\n        light_mac = get_mac_from_name(light_name)\n        start_time = datetime.datetime.now()\n        while True:\n            end_time = datetime.datetime.now()\n            if not self.bl_get_sync:\n                response = self.udp_listen.server_receive_message()\n                if response is not False:\n                    try:\n                        response = json.loads(response)\n                    except:\n                        continue\n                    if response[\"method\"] == \"syncPilot\":\n                        payload = response[\"params\"]\n                        if payload[\"mac\"] == light_mac and payload[\"src\"] == src_type:\n                            # self.bl_register = False\n                            print(\"UDP:\" + str(response))\n                            return response\n                if (end_time - start_time).seconds > 10:\n>                   assert False, \"Error : Get UDP syncPilot timeout!\"\nE                   AssertionError: Error : Get UDP syncPilot timeout!\n\n..\\..\\..\\Wrapper\\wrapper_udp.py:384: AssertionError"}, "description": "single_device_control_by_udp.feature: Single device control - Dimming", "attachments": [{"name": "log", "source": "ccddcce2-88c8-4f7c-aba0-f0197d93e2d5-attachment.txt", "type": "text/plain"}], "start": 1608795303431, "stop": 1608795327254, "uuid": "4ef5d069-b269-4c73-a9d7-7d68062faac0", "historyId": "8bfca401b7b09d61cbf0022752e1c21d", "testCaseId": "59c3d7a17d925e0234f0bcfaaee825f0", "fullName": "Test_Suites.Tests.test_regression_product.test_05_udp_communication#test_single_device_control_dimming", "labels": [{"name": "story", "value": "Device Control"}, {"name": "feature", "value": "UDP Communication"}, {"name": "tag", "value": "usefixtures"}, {"name": "parentSuite", "value": "Test_Suites.Tests.test_regression_product"}, {"name": "suite", "value": "test_05_udp_communication"}, {"name": "host", "value": "WIZ-LENOVOPT-SH0012"}, {"name": "thread", "value": "13344-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Suites.Tests.test_regression_product.test_05_udp_communication"}]}