{"name": "test_28_create_two_schedules_of_two_intersecting_time_periods", "status": "failed", "statusDetails": {"message": "AssertionError: UDP state should be false, but was true", "trace": "request = <FixtureRequest for <Function test_28_create_two_schedules_of_two_intersecting_time_periods>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:189: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:130: in _execute_step_function\n    step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x0000019A4BE61C08>\nlight_name = 'light_1', action = 'OFF'\n\n    @then(parsers.parse('check {light_name} status is {action}'))\n    def check_light_status(target, light_name, action):\n        logger.info(\"check light status\")\n        # udp_sync_res = target.udp.get_udp_sync_pilot(light_name, \"schd\")\n        # # logger.info(\"udp syncPilot:\" + str(udp_sync_res))\n        # mqtt_res = target.mqtt.get_res_mqtt_sync_pilot(light_name)\n        # if mqtt_res is None:\n        #     logger.info(\"Error : MQTT did not get syncPilot from device!\")\n        #     assert False, \"Error : MQTT did not get syncPilot from device!\"\n        # else:\n        #     logger.info(\"mqtt syncPilot:\" + str(mqtt_res))\n        response = target.udp.get_pilot_phone(light_name)\n        logger.info(\"udp response:\" + str(response))\n    \n        if action == 'ON':\n            # if mqtt_res[\"params\"][\"state\"] is False:\n            #     logger.info(\"Error : MQTT syncPilot state should be true, but was false\")\n            #     assert False, \"MQTT syncPilot state should be true, but was false\"\n            # if udp_sync_res[\"params\"][\"state\"] is False:\n            #     logger.info(\"Error : UDP syncPilot state should be true, but was false\")\n            #     assert False, \"UDP syncPilot state should be true, but was false\"\n            if response[\"result\"][\"state\"] is False:\n                logger.info(\"Error : UDP state should be true, but was false\")\n                assert False, \"UDP state should be true, but was false\"\n        elif action == 'OFF':\n            # if mqtt_res[\"params\"][\"state\"] is True:\n            #     logger.info(\"Error : MQTT syncPilot state should be false, but was true\")\n            #     assert False, \"MQTT syncPilot state should be false, but was true\"\n            # if udp_sync_res[\"params\"][\"state\"] is True:\n            #     logger.info(\"Error : UDP syncPilot state should be false, but was true\")\n            #     assert False, \"UDP syncPilot state should be false, but was true\"\n            if response[\"result\"][\"state\"] is True:\n                logger.info(\"Error : UDP state should be false, but was true\")\n>               assert False, \"UDP state should be false, but was true\"\nE               AssertionError: UDP state should be false, but was true\n\n..\\..\\Steps\\schedule_action_steps.py:288: AssertionError"}, "description": "schedule.feature: Create 2 schedules of two intersecting time periods", "attachments": [{"name": "log", "source": "3ba3be28-c261-49f9-b27e-ca25ba54ef8c-attachment.txt", "type": "text/plain"}], "start": 1608738776916, "stop": 1608739746681, "uuid": "935a5c91-aa29-401b-aa85-6558f16dff10", "historyId": "9b99d1a34e2ddc61a2093bb5612bb028", "testCaseId": "028aba5c978c50a36355ee2dc636c536", "fullName": "Test_Suites.Tests.test_regression_product.test_07_schedule_by_mqtt#test_28_create_two_schedules_of_two_intersecting_time_periods", "labels": [{"name": "feature", "value": "Create schedule by mqtt"}, {"name": "story", "value": "Create 2 schedules of two intersecting time periods"}, {"name": "tag", "value": "usefixtures"}, {"name": "parentSuite", "value": "Test_Suites.Tests.test_regression_product"}, {"name": "suite", "value": "test_07_schedule_by_mqtt"}, {"name": "host", "value": "WIZ-LENOVOPT-SH0012"}, {"name": "thread", "value": "14908-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Suites.Tests.test_regression_product.test_07_schedule_by_mqtt"}]}