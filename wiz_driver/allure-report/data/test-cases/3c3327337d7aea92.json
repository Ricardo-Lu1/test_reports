{
  "uid" : "3c3327337d7aea92",
  "name" : "test_01_enable_default_rhythm_by_mqtt",
  "fullName" : "Test_Suites.Tests.test_regression_product.test_08_rhythm_by_mqtt#test_01_enable_default_rhythm_by_mqtt",
  "historyId" : "65bc7269613e13a77df02ce6ed44f156",
  "time" : {
    "start" : 1608572723720,
    "stop" : 1608572734973,
    "duration" : 11253
  },
  "description" : "rhythm.feature: Enable circadian rhythm by mqtt",
  "descriptionHtml" : "<p>rhythm.feature: Enable circadian rhythm by mqtt</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: check light_1 light mode UDP syncPilot fail! should be 16, but was 12",
  "statusTrace" : "request = <FixtureRequest for <Function test_01_enable_default_rhythm_by_mqtt>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:189: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:130: in _execute_step_function\n    step_func(**kwargs)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\steps.py:162: in step_func\n    result = request.getfixturevalue(func.__name__)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:482: in getfixturevalue\n    return self._get_active_fixturedef(argname).cached_result[0]\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:498: in _get_active_fixturedef\n    self._compute_fixture_value(fixturedef)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:579: in _compute_fixture_value\n    fixturedef.execute(request=subrequest)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:908: in execute\n    return hook.pytest_fixture_setup(fixturedef=self, request=request)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pluggy\\manager.py:87: in <lambda>\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:957: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:787: in call_fixture_func\n    res = fixturefunc(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x00000160617A1A88>\nlight_name = 'light_1', light_mode = 'Relax', act_type = 'udp'\n\n    @given(parsers.parse('Check if {light_name} light mode is {light_mode} by {act_type}'))\n    def check_light_mode(target, light_name, light_mode, act_type):\n        \"\"\"\n                - Narrative:\n                    Check if {light_name} light mode is {light_mode} from light\n        \"\"\"\n        logger.info(\"check light mode\")\n        scene_id = translator_scene_id(light_mode)\n        udp_sync_res = target.udp.get_udp_sync_pilot(light_name, act_type)\n        logger.info(\"udp syncPilot:\" + str(udp_sync_res))\n        mqtt_res = target.mqtt.get_res_mqtt_sync_pilot(light_name)\n        if mqtt_res is None:\n            logger.info(\"Error : MQTT did not get syncPilot from device!\")\n            assert False, \"Error : MQTT did not get syncPilot from device!\"\n        else:\n            logger.info(\"mqtt syncPilot:\" + str(mqtt_res))\n        response = target.udp.get_pilot_phone(light_name)\n        logger.info(\"udp response:\" + str(response))\n    \n        actual_scene_id = int(response[\"result\"][\"sceneId\"])\n    \n        if int(mqtt_res[\"params\"][\"sceneId\"]) != int(scene_id):\n            logger.info(\"Error : check \" + light_name + \" light mode MQTT syncPilot fail! should be \" + str(scene_id) +\n                        \", but was \" + str(mqtt_res[\"params\"][\"sceneId\"]))\n            assert False, \"check \" + light_name + \" light mode MQTT syncPilot fail! should be \" + str(scene_id) + \\\n                          \", but was \" + str(mqtt_res[\"params\"][\"sceneId\"])\n    \n        if int(udp_sync_res[\"params\"][\"sceneId\"]) != int(scene_id):\n            logger.info(\"Error : check \" + light_name + \" light mode UDP syncPilot fail! should be \" + str(scene_id) +\n                        \", but was \" + str(udp_sync_res[\"params\"][\"sceneId\"]))\n            assert False, \"check \" + light_name + \" light mode UDP syncPilot fail! should be \" + str(scene_id) + \\\n>                         \", but was \" + str(udp_sync_res[\"params\"][\"sceneId\"])\nE           AssertionError: check light_1 light mode UDP syncPilot fail! should be 16, but was 12\n\n..\\..\\Steps\\control_lamp_steps.py:853: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "target",
    "time" : {
      "start" : 1608572723719,
      "stop" : 1608572723719,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "description" : "rhythm.feature: Enable circadian rhythm by mqtt",
    "status" : "failed",
    "statusMessage" : "AssertionError: check light_1 light mode UDP syncPilot fail! should be 16, but was 12",
    "statusTrace" : "request = <FixtureRequest for <Function test_01_enable_default_rhythm_by_mqtt>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:189: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:130: in _execute_step_function\n    step_func(**kwargs)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\steps.py:162: in step_func\n    result = request.getfixturevalue(func.__name__)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:482: in getfixturevalue\n    return self._get_active_fixturedef(argname).cached_result[0]\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:498: in _get_active_fixturedef\n    self._compute_fixture_value(fixturedef)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:579: in _compute_fixture_value\n    fixturedef.execute(request=subrequest)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:908: in execute\n    return hook.pytest_fixture_setup(fixturedef=self, request=request)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pluggy\\manager.py:87: in <lambda>\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:957: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:787: in call_fixture_func\n    res = fixturefunc(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x00000160617A1A88>\nlight_name = 'light_1', light_mode = 'Relax', act_type = 'udp'\n\n    @given(parsers.parse('Check if {light_name} light mode is {light_mode} by {act_type}'))\n    def check_light_mode(target, light_name, light_mode, act_type):\n        \"\"\"\n                - Narrative:\n                    Check if {light_name} light mode is {light_mode} from light\n        \"\"\"\n        logger.info(\"check light mode\")\n        scene_id = translator_scene_id(light_mode)\n        udp_sync_res = target.udp.get_udp_sync_pilot(light_name, act_type)\n        logger.info(\"udp syncPilot:\" + str(udp_sync_res))\n        mqtt_res = target.mqtt.get_res_mqtt_sync_pilot(light_name)\n        if mqtt_res is None:\n            logger.info(\"Error : MQTT did not get syncPilot from device!\")\n            assert False, \"Error : MQTT did not get syncPilot from device!\"\n        else:\n            logger.info(\"mqtt syncPilot:\" + str(mqtt_res))\n        response = target.udp.get_pilot_phone(light_name)\n        logger.info(\"udp response:\" + str(response))\n    \n        actual_scene_id = int(response[\"result\"][\"sceneId\"])\n    \n        if int(mqtt_res[\"params\"][\"sceneId\"]) != int(scene_id):\n            logger.info(\"Error : check \" + light_name + \" light mode MQTT syncPilot fail! should be \" + str(scene_id) +\n                        \", but was \" + str(mqtt_res[\"params\"][\"sceneId\"]))\n            assert False, \"check \" + light_name + \" light mode MQTT syncPilot fail! should be \" + str(scene_id) + \\\n                          \", but was \" + str(mqtt_res[\"params\"][\"sceneId\"])\n    \n        if int(udp_sync_res[\"params\"][\"sceneId\"]) != int(scene_id):\n            logger.info(\"Error : check \" + light_name + \" light mode UDP syncPilot fail! should be \" + str(scene_id) +\n                        \", but was \" + str(udp_sync_res[\"params\"][\"sceneId\"]))\n            assert False, \"check \" + light_name + \" light mode UDP syncPilot fail! should be \" + str(scene_id) + \\\n>                         \", but was \" + str(udp_sync_res[\"params\"][\"sceneId\"])\nE           AssertionError: check light_1 light mode UDP syncPilot fail! should be 16, but was 12\n\n..\\..\\Steps\\control_lamp_steps.py:853: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "eefabe375f329b8c",
      "name" : "log",
      "source" : "eefabe375f329b8c.txt",
      "type" : "text/plain",
      "size" : 2818
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1,
    "hasContent" : true,
    "stepsCount" : 0
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Test cases for rhythm"
  }, {
    "name" : "story",
    "value" : "Enable circadian rhythm by mqtt"
  }, {
    "name" : "tag",
    "value" : "usefixtures"
  }, {
    "name" : "parentSuite",
    "value" : "Test_Suites.Tests.test_regression_product"
  }, {
    "name" : "suite",
    "value" : "test_08_rhythm_by_mqtt"
  }, {
    "name" : "host",
    "value" : "WIZ-LENOVOPT-SH0012"
  }, {
    "name" : "thread",
    "value" : "8716-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "Test_Suites.Tests.test_regression_product.test_08_rhythm_by_mqtt"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "usefixtures" ]
  },
  "source" : "3c3327337d7aea92.json",
  "parameterValues" : [ ]
}