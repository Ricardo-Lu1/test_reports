{
  "uid" : "d0e2f1a4a79215b0",
  "name" : "test_tcp_comm_dimming",
  "fullName" : "Test_Suites.Tests.test_regression_product.test_06_tcp_communication#test_tcp_comm_dimming",
  "historyId" : "3215da9b5061322a6fbfd84166f2e751",
  "time" : {
    "start" : 1608714013499,
    "stop" : 1608714049235,
    "duration" : 35736
  },
  "description" : "tcp_comm.feature: Single device control by mqtt - Dimming",
  "descriptionHtml" : "<p>tcp_comm.feature: Single device control by mqtt - Dimming</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: check light_1 dim UDP syncPilot fail! should be 30, but was 10",
  "statusTrace" : "request = <FixtureRequest for <Function test_tcp_comm_dimming>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:189: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:130: in _execute_step_function\n    step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x0000014BEB78BC48>\nlight_name = 'light_1', dimming_level = '30', act_type = 'wizappd'\n\n    @when(parsers.parse('Check if {light_name} dim to {dimming_level} by {act_type}'))\n    def check_light_dimming_level(target, light_name, dimming_level, act_type):\n        \"\"\"\n        - Narrative:\n            check {light_name} dimming_level status from light\n        \"\"\"\n        logger.info(\"check light dimming\")\n        udp_sync_res = target.udp.get_udp_sync_pilot(light_name, act_type)\n        logger.info(\"udp syncPilot:\" + str(udp_sync_res))\n        mqtt_res = target.mqtt.get_res_mqtt_sync_pilot(light_name)\n        if mqtt_res is None:\n            logger.info(\"Error : MQTT did not get syncPilot from device!\")\n            assert False, \"Error : MQTT did not get syncPilot from device!\"\n        else:\n            logger.info(\"mqtt syncPilot:\" + str(mqtt_res))\n        response = target.udp.get_pilot_phone(light_name)\n        logger.info(\"udp response:\" + str(response))\n    \n        actul_dimming_value = int(response[\"result\"][\"dimming\"])\n    \n        if int(mqtt_res[\"params\"][\"dimming\"]) != int(dimming_level):\n            logger.info(\"Error : check \" + light_name + \" dim MQTT syncPilot fail! should be \" + str(dimming_level) +\n                        \", but was \" + str(mqtt_res[\"params\"][\"dimming\"]))\n            assert False, \"check \" + light_name + \" dim MQTT syncPilot fail! should be \" + str(dimming_level) + \\\n                          \", but was \" + str(mqtt_res[\"params\"][\"dimming\"])\n    \n        if int(udp_sync_res[\"params\"][\"dimming\"]) != int(dimming_level):\n            logger.info(\"Error : check \" + light_name + \" dim UDP syncPilot fail! should be \" + str(dimming_level) +\n                        \", but was \" + str(udp_sync_res[\"params\"][\"dimming\"]))\n            assert False, \"check \" + light_name + \" dim UDP syncPilot fail! should be \" + str(dimming_level) + \\\n>                         \", but was \" + str(udp_sync_res[\"params\"][\"dimming\"])\nE           AssertionError: check light_1 dim UDP syncPilot fail! should be 30, but was 10\n\n..\\..\\Steps\\control_lamp_steps.py:692: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "tcp_comm.feature: Single device control by mqtt - Dimming",
    "status" : "failed",
    "statusMessage" : "AssertionError: check light_1 dim UDP syncPilot fail! should be 30, but was 10",
    "statusTrace" : "request = <FixtureRequest for <Function test_tcp_comm_dimming>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:189: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:130: in _execute_step_function\n    step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x0000014BEB78BC48>\nlight_name = 'light_1', dimming_level = '30', act_type = 'wizappd'\n\n    @when(parsers.parse('Check if {light_name} dim to {dimming_level} by {act_type}'))\n    def check_light_dimming_level(target, light_name, dimming_level, act_type):\n        \"\"\"\n        - Narrative:\n            check {light_name} dimming_level status from light\n        \"\"\"\n        logger.info(\"check light dimming\")\n        udp_sync_res = target.udp.get_udp_sync_pilot(light_name, act_type)\n        logger.info(\"udp syncPilot:\" + str(udp_sync_res))\n        mqtt_res = target.mqtt.get_res_mqtt_sync_pilot(light_name)\n        if mqtt_res is None:\n            logger.info(\"Error : MQTT did not get syncPilot from device!\")\n            assert False, \"Error : MQTT did not get syncPilot from device!\"\n        else:\n            logger.info(\"mqtt syncPilot:\" + str(mqtt_res))\n        response = target.udp.get_pilot_phone(light_name)\n        logger.info(\"udp response:\" + str(response))\n    \n        actul_dimming_value = int(response[\"result\"][\"dimming\"])\n    \n        if int(mqtt_res[\"params\"][\"dimming\"]) != int(dimming_level):\n            logger.info(\"Error : check \" + light_name + \" dim MQTT syncPilot fail! should be \" + str(dimming_level) +\n                        \", but was \" + str(mqtt_res[\"params\"][\"dimming\"]))\n            assert False, \"check \" + light_name + \" dim MQTT syncPilot fail! should be \" + str(dimming_level) + \\\n                          \", but was \" + str(mqtt_res[\"params\"][\"dimming\"])\n    \n        if int(udp_sync_res[\"params\"][\"dimming\"]) != int(dimming_level):\n            logger.info(\"Error : check \" + light_name + \" dim UDP syncPilot fail! should be \" + str(dimming_level) +\n                        \", but was \" + str(udp_sync_res[\"params\"][\"dimming\"]))\n            assert False, \"check \" + light_name + \" dim UDP syncPilot fail! should be \" + str(dimming_level) + \\\n>                         \", but was \" + str(udp_sync_res[\"params\"][\"dimming\"])\nE           AssertionError: check light_1 dim UDP syncPilot fail! should be 30, but was 10\n\n..\\..\\Steps\\control_lamp_steps.py:692: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "7402e023804649ac",
      "name" : "log",
      "source" : "7402e023804649ac.txt",
      "type" : "text/plain",
      "size" : 9367
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1,
    "hasContent" : true,
    "stepsCount" : 0
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "Device control"
  }, {
    "name" : "feature",
    "value" : "TCP Communication"
  }, {
    "name" : "tag",
    "value" : "usefixtures"
  }, {
    "name" : "parentSuite",
    "value" : "Test_Suites.Tests.test_regression_product"
  }, {
    "name" : "suite",
    "value" : "test_06_tcp_communication"
  }, {
    "name" : "host",
    "value" : "WIZ-LENOVOPT-SH0012"
  }, {
    "name" : "thread",
    "value" : "6432-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "Test_Suites.Tests.test_regression_product.test_06_tcp_communication"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "usefixtures" ]
  },
  "source" : "d0e2f1a4a79215b0.json",
  "parameterValues" : [ ]
}