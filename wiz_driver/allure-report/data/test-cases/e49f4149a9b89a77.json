{
  "uid" : "e49f4149a9b89a77",
  "name" : "test_tcp_comm_temperature",
  "fullName" : "Test_Suites.Tests.test_regression_product.test_06_tcp_communication#test_tcp_comm_temperature",
  "historyId" : "4062ab6af57d55239c3f883b95af97bf",
  "time" : {
    "start" : 1608714049271,
    "stop" : 1608714062830,
    "duration" : 13559
  },
  "description" : "tcp_comm.feature: Single device control by mqtt - Temperature",
  "descriptionHtml" : "<p>tcp_comm.feature: Single device control by mqtt - Temperature</p>\n",
  "status" : "broken",
  "statusMessage" : "KeyError: 'temp'",
  "statusTrace" : "request = <FixtureRequest for <Function test_tcp_comm_temperature>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:189: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:130: in _execute_step_function\n    step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x0000014BEB78BC48>\nlight_name = 'light_1', temperature = '2700', act_type = 'wizappd'\n\n    @when(parsers.parse('Check if {light_name} temperature is changed to {temperature} by {act_type}'))\n    def check_light_temperature(target, light_name, temperature, act_type):\n        \"\"\"\n        - Narrative:\n            check {light_name} {speed} status from light\n        \"\"\"\n        logger.info(\"check light temperature\")\n        udp_sync_res = target.udp.get_udp_sync_pilot(light_name, act_type)\n        logger.info(\"udp syncPilot:\" + str(udp_sync_res))\n        mqtt_res = target.mqtt.get_res_mqtt_sync_pilot(light_name)\n        if mqtt_res is None:\n            logger.info(\"Error : MQTT did not get syncPilot from device!\")\n            assert False, \"Error : MQTT did not get syncPilot from device!\"\n        else:\n            logger.info(\"mqtt syncPilot:\" + str(mqtt_res))\n        response = target.udp.get_pilot_phone(light_name)\n        logger.info(\"udp response:\" + str(response))\n    \n        actul_temperature = int(response[\"result\"][\"temp\"])\n    \n        if int(mqtt_res[\"params\"][\"temp\"]) != int(temperature):\n            logger.info(\"Error : check \" + light_name + \" temperature MQTT syncPilot fail! should be \" + str(temperature) +\n                        \", but was \" + str(mqtt_res[\"params\"][\"temp\"]))\n            assert False, \"check \" + light_name + \" temperature MQTT syncPilot fail! should be \" + str(temperature) + \\\n                          \", but was \" + str(mqtt_res[\"params\"][\"temp\"])\n    \n>       if int(udp_sync_res[\"params\"][\"temp\"]) != int(temperature):\nE       KeyError: 'temp'\n\n..\\..\\Steps\\control_lamp_steps.py:741: KeyError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "tcp_comm.feature: Single device control by mqtt - Temperature",
    "status" : "broken",
    "statusMessage" : "KeyError: 'temp'",
    "statusTrace" : "request = <FixtureRequest for <Function test_tcp_comm_temperature>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:189: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:130: in _execute_step_function\n    step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x0000014BEB78BC48>\nlight_name = 'light_1', temperature = '2700', act_type = 'wizappd'\n\n    @when(parsers.parse('Check if {light_name} temperature is changed to {temperature} by {act_type}'))\n    def check_light_temperature(target, light_name, temperature, act_type):\n        \"\"\"\n        - Narrative:\n            check {light_name} {speed} status from light\n        \"\"\"\n        logger.info(\"check light temperature\")\n        udp_sync_res = target.udp.get_udp_sync_pilot(light_name, act_type)\n        logger.info(\"udp syncPilot:\" + str(udp_sync_res))\n        mqtt_res = target.mqtt.get_res_mqtt_sync_pilot(light_name)\n        if mqtt_res is None:\n            logger.info(\"Error : MQTT did not get syncPilot from device!\")\n            assert False, \"Error : MQTT did not get syncPilot from device!\"\n        else:\n            logger.info(\"mqtt syncPilot:\" + str(mqtt_res))\n        response = target.udp.get_pilot_phone(light_name)\n        logger.info(\"udp response:\" + str(response))\n    \n        actul_temperature = int(response[\"result\"][\"temp\"])\n    \n        if int(mqtt_res[\"params\"][\"temp\"]) != int(temperature):\n            logger.info(\"Error : check \" + light_name + \" temperature MQTT syncPilot fail! should be \" + str(temperature) +\n                        \", but was \" + str(mqtt_res[\"params\"][\"temp\"]))\n            assert False, \"check \" + light_name + \" temperature MQTT syncPilot fail! should be \" + str(temperature) + \\\n                          \", but was \" + str(mqtt_res[\"params\"][\"temp\"])\n    \n>       if int(udp_sync_res[\"params\"][\"temp\"]) != int(temperature):\nE       KeyError: 'temp'\n\n..\\..\\Steps\\control_lamp_steps.py:741: KeyError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "554e10979a9942ac",
      "name" : "log",
      "source" : "554e10979a9942ac.txt",
      "type" : "text/plain",
      "size" : 3950
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1,
    "hasContent" : true,
    "stepsCount" : 0
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "Device control"
  }, {
    "name" : "feature",
    "value" : "TCP Communication"
  }, {
    "name" : "tag",
    "value" : "usefixtures"
  }, {
    "name" : "parentSuite",
    "value" : "Test_Suites.Tests.test_regression_product"
  }, {
    "name" : "suite",
    "value" : "test_06_tcp_communication"
  }, {
    "name" : "host",
    "value" : "WIZ-LENOVOPT-SH0012"
  }, {
    "name" : "thread",
    "value" : "6432-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "Test_Suites.Tests.test_regression_product.test_06_tcp_communication"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "usefixtures" ]
  },
  "source" : "e49f4149a9b89a77.json",
  "parameterValues" : [ ]
}