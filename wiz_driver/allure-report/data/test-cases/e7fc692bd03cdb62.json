{
  "uid" : "e7fc692bd03cdb62",
  "name" : "test_17_create_schedule_with_bedtime_end_with_previous_mode_when_lamp_status_night_light",
  "fullName" : "Test_Suites.Tests.test_regression_product.test_07_schedule_by_mqtt#test_17_create_schedule_with_bedtime_end_with_previous_mode_when_lamp_status_night_light",
  "historyId" : "fe2a28bc5d8e9a76a009340941e184c6",
  "time" : {
    "start" : 1608552101161,
    "stop" : 1608552431329,
    "duration" : 330168
  },
  "description" : "schedule.feature: Create a schedule with action \"Bedtime\" and end with \"Previous mode\" when lamp original status is \"Night Light\"",
  "descriptionHtml" : "<p>schedule.feature: Create a schedule with action &quot;Bedtime&quot; and end with &quot;Previous mode&quot; when lamp original status is &quot;Night Light&quot;</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: Error : create schedule for light_1 fail! UDP SceneId should be 14, but was 10",
  "statusTrace" : "request = <FixtureRequest for <Function test_17_create_schedule_with_bedtime_end_with_previous_mode_when_lamp_status_night_light>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:189: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:130: in _execute_step_function\n    step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x00000160617A1A88>\nlight_name = 'light_1', light_scene = 'Night light'\n\n    @then(parsers.parse('check schedule for {light_name} keeps {light_scene} mode'))\n    def check_kepp_schedule(target, light_name, light_scene):\n        response = target.udp.get_pilot_phone(light_name)\n        logger.info(\"udp response:\" + str(response))\n    \n        res_light_scene_id_udp = response[\"result\"][\"sceneId\"]\n    \n        expect_light_scene_id = int(translator_scene_id(light_scene))\n    \n        # check by udp\n        if res_light_scene_id_udp != expect_light_scene_id:\n            logger.info(\"Error : create schedule for \" + light_name + \" fail! UDP SceneId should be \" +\n                        str(expect_light_scene_id) + \", but was \" + str(res_light_scene_id_udp))\n            assert False, \"Error : create schedule for \" + light_name + \" fail! UDP SceneId should be \" + \\\n>                         str(expect_light_scene_id) + \", but was \" + str(res_light_scene_id_udp)\nE           AssertionError: Error : create schedule for light_1 fail! UDP SceneId should be 14, but was 10\n\n..\\..\\Steps\\schedule_action_steps.py:403: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "target",
    "time" : {
      "start" : 1608542877301,
      "stop" : 1608542877302,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "description" : "schedule.feature: Create a schedule with action \"Bedtime\" and end with \"Previous mode\" when lamp original status is \"Night Light\"",
    "status" : "failed",
    "statusMessage" : "AssertionError: Error : create schedule for light_1 fail! UDP SceneId should be 14, but was 10",
    "statusTrace" : "request = <FixtureRequest for <Function test_17_create_schedule_with_bedtime_end_with_previous_mode_when_lamp_status_night_light>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:189: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:130: in _execute_step_function\n    step_func(**kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ntarget = <Wrapper.wrapper_manage.WrapperManage object at 0x00000160617A1A88>\nlight_name = 'light_1', light_scene = 'Night light'\n\n    @then(parsers.parse('check schedule for {light_name} keeps {light_scene} mode'))\n    def check_kepp_schedule(target, light_name, light_scene):\n        response = target.udp.get_pilot_phone(light_name)\n        logger.info(\"udp response:\" + str(response))\n    \n        res_light_scene_id_udp = response[\"result\"][\"sceneId\"]\n    \n        expect_light_scene_id = int(translator_scene_id(light_scene))\n    \n        # check by udp\n        if res_light_scene_id_udp != expect_light_scene_id:\n            logger.info(\"Error : create schedule for \" + light_name + \" fail! UDP SceneId should be \" +\n                        str(expect_light_scene_id) + \", but was \" + str(res_light_scene_id_udp))\n            assert False, \"Error : create schedule for \" + light_name + \" fail! UDP SceneId should be \" + \\\n>                         str(expect_light_scene_id) + \", but was \" + str(res_light_scene_id_udp)\nE           AssertionError: Error : create schedule for light_1 fail! UDP SceneId should be 14, but was 10\n\n..\\..\\Steps\\schedule_action_steps.py:403: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "511ea5cd929ad382",
      "name" : "log",
      "source" : "511ea5cd929ad382.txt",
      "type" : "text/plain",
      "size" : 4104
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1,
    "hasContent" : true,
    "stepsCount" : 0
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "Create a schedule with action \"Bedtime\" and end with \"Previous mode\" when lamp original status is \"Night Light\""
  }, {
    "name" : "feature",
    "value" : "Create schedule by mqtt"
  }, {
    "name" : "tag",
    "value" : "usefixtures"
  }, {
    "name" : "parentSuite",
    "value" : "Test_Suites.Tests.test_regression_product"
  }, {
    "name" : "suite",
    "value" : "test_07_schedule_by_mqtt"
  }, {
    "name" : "host",
    "value" : "WIZ-LENOVOPT-SH0012"
  }, {
    "name" : "thread",
    "value" : "8716-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "Test_Suites.Tests.test_regression_product.test_07_schedule_by_mqtt"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "usefixtures" ]
  },
  "source" : "e7fc692bd03cdb62.json",
  "parameterValues" : [ ]
}