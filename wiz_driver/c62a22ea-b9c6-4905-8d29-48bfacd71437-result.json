{"name": "test_17_trigger_schedule_when_rhythm_playing_by_mqtt", "status": "failed", "statusDetails": {"message": "AssertionError: Error : Get UDP syncPilot timeout!", "trace": "request = <FixtureRequest for <Function test_17_trigger_schedule_when_rhythm_playing_by_mqtt>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:189: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:130: in _execute_step_function\n    step_func(**kwargs)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\steps.py:162: in step_func\n    result = request.getfixturevalue(func.__name__)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:482: in getfixturevalue\n    return self._get_active_fixturedef(argname).cached_result[0]\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:498: in _get_active_fixturedef\n    self._compute_fixture_value(fixturedef)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:579: in _compute_fixture_value\n    fixturedef.execute(request=subrequest)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:908: in execute\n    return hook.pytest_fixture_setup(fixturedef=self, request=request)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pluggy\\manager.py:87: in <lambda>\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:957: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:787: in call_fixture_func\n    res = fixturefunc(**kwargs)\n..\\..\\Steps\\control_lamp_steps.py:830: in check_light_mode\n    udp_sync_res = target.udp.get_udp_sync_pilot(light_name, act_type)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Wrapper.wrapper_udp.WrapperUDP object at 0x0000019A4BE61E08>\nlight_name = 'light_1', src_type = 'udp'\n\n    def get_udp_sync_pilot(self, light_name, src_type):\n        light_mac = get_mac_from_name(light_name)\n        start_time = datetime.datetime.now()\n        while True:\n            end_time = datetime.datetime.now()\n            if not self.bl_get_sync:\n                response = self.udp_listen.server_receive_message()\n                if response is not False:\n                    try:\n                        response = json.loads(response)\n                    except:\n                        continue\n                    if response[\"method\"] == \"syncPilot\":\n                        payload = response[\"params\"]\n                        if payload[\"mac\"] == light_mac and payload[\"src\"] == src_type:\n                            # self.bl_register = False\n                            print(\"UDP:\" + str(response))\n                            return response\n                if (end_time - start_time).seconds > 10:\n>                   assert False, \"Error : Get UDP syncPilot timeout!\"\nE                   AssertionError: Error : Get UDP syncPilot timeout!\n\n..\\..\\..\\Wrapper\\wrapper_udp.py:384: AssertionError"}, "description": "rhythm.feature: Trigger a schedule when rhythm playing", "attachments": [{"name": "log", "source": "b936e8af-0aec-49b7-b24d-0722f158705c-attachment.txt", "type": "text/plain"}], "start": 1608747964139, "stop": 1608747989039, "uuid": "ba631e61-7c6a-41e1-887d-9d77e809ac7a", "historyId": "8fd09485eac4ebd25fc174b0e729a53c", "testCaseId": "9bd86d561491a505cf90bcf36e652e2f", "fullName": "Test_Suites.Tests.test_regression_product.test_08_rhythm_by_mqtt#test_17_trigger_schedule_when_rhythm_playing_by_mqtt", "labels": [{"name": "feature", "value": "Test cases for rhythm"}, {"name": "story", "value": "Trigger a schedule when rhythm playing"}, {"name": "tag", "value": "usefixtures"}, {"name": "parentSuite", "value": "Test_Suites.Tests.test_regression_product"}, {"name": "suite", "value": "test_08_rhythm_by_mqtt"}, {"name": "host", "value": "WIZ-LENOVOPT-SH0012"}, {"name": "thread", "value": "14908-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Suites.Tests.test_regression_product.test_08_rhythm_by_mqtt"}]}