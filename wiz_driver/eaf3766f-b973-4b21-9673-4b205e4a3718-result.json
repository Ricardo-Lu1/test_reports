{"name": "test_single_device_control_speed", "status": "failed", "statusDetails": {"message": "AssertionError: Error : Get MQTT syncPilot timeout!", "trace": "request = <FixtureRequest for <Function test_single_device_control_speed>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:189: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\scenario.py:130: in _execute_step_function\n    step_func(**kwargs)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pytest_bdd\\steps.py:162: in step_func\n    result = request.getfixturevalue(func.__name__)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:482: in getfixturevalue\n    return self._get_active_fixturedef(argname).cached_result[0]\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:498: in _get_active_fixturedef\n    self._compute_fixture_value(fixturedef)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:579: in _compute_fixture_value\n    fixturedef.execute(request=subrequest)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:908: in execute\n    return hook.pytest_fixture_setup(fixturedef=self, request=request)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pluggy\\manager.py:87: in <lambda>\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:957: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\nC:\\Users\\Ricardo.Lu\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\_pytest\\fixtures.py:787: in call_fixture_func\n    res = fixturefunc(**kwargs)\n..\\..\\Steps\\control_lamp_steps.py:832: in check_light_mode\n    mqtt_res = target.mqtt.get_res_mqtt_sync_pilot(light_name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Wrapper.wrapper_mqtt.WrapperMQTT object at 0x000002647AAB1048>\nlight_name = 'light_1'\n\n    def get_res_mqtt_sync_pilot(self, light_name):\n        topic = self.cloud_mqtt_cmd.create_topic_from_light(light_name)\n        start_time = datetime.datetime.now()\n        while True:\n            for mqtt_client in self.list_mqtt_client:\n                rcv_topic, rcv_msg = mqtt_client.get_subscribe_topic_message()\n                if topic == rcv_topic:\n                    if rcv_msg[\"method\"] == \"syncPilot\":\n                        print(\"MQTT:\" + str(rcv_msg))\n                        mqtt_client.clear_subscribe_topic_message()\n                        return rcv_msg\n            if (datetime.datetime.now() - start_time).seconds > 10:\n>               assert False, \"Error : Get MQTT syncPilot timeout!\"\nE               AssertionError: Error : Get MQTT syncPilot timeout!\n\n..\\..\\..\\Wrapper\\wrapper_mqtt.py:406: AssertionError"}, "description": "single_device_control_by_udp.feature: Single device control - Speed", "attachments": [{"name": "log", "source": "b1ac17b0-cc1b-49db-acba-72aab04f3763-attachment.txt", "type": "text/plain"}], "start": 1608793554400, "stop": 1608793573080, "uuid": "35ad672b-5d0b-4841-b3b5-a62ff3ae5915", "historyId": "70c0a048908d8336481a3e068a53a6e4", "testCaseId": "e892558179d151096b074e40e1c637c0", "fullName": "Test_Suites.Tests.test_regression_product.test_05_udp_communication#test_single_device_control_speed", "labels": [{"name": "feature", "value": "UDP Communication"}, {"name": "story", "value": "Device Control"}, {"name": "tag", "value": "usefixtures"}, {"name": "parentSuite", "value": "Test_Suites.Tests.test_regression_product"}, {"name": "suite", "value": "test_05_udp_communication"}, {"name": "host", "value": "WIZ-LENOVOPT-SH0012"}, {"name": "thread", "value": "13276-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Suites.Tests.test_regression_product.test_05_udp_communication"}]}